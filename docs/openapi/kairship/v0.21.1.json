{
  "swagger": "2.0",
  "info": {
    "title": "多云编排",
    "version": "v0.21.1"
  },
  "tags": [
    {
      "name": "Aggregation"
    },
    {
      "name": "Apiextensions"
    },
    {
      "name": "Apps"
    },
    {
      "name": "Autoscaling"
    },
    {
      "name": "Batch"
    },
    {
      "name": "CloudShell"
    },
    {
      "name": "Cluster"
    },
    {
      "name": "Core"
    },
    {
      "name": "Image"
    },
    {
      "name": "Insight"
    },
    {
      "name": "Instance"
    },
    {
      "name": "Networking"
    },
    {
      "name": "Policy"
    },
    {
      "name": "Workspace"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/kairship.io/v1alpha1/instances": {
      "get": {
        "summary": "ListInstances list all karmada cr.",
        "operationId": "Instance_ListInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Name of instance.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the instance list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the instance list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Instance"
        ]
      },
      "post": {
        "summary": "CreateInstance create karmadadeploy to instance karmada on the cluster.",
        "operationId": "Instance_CreateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Instance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstanceRequest"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/aggregationresource": {
      "post": {
        "summary": "CreateClusterAggregationResource create multi resource for kairship.",
        "operationId": "Aggregation_CreateClusterAggregationResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ClusterAggregationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/v1alpha1ClusterAggregationResource"
                },
                "gvr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1alpha1GVR"
                  },
                  "description": "GVR represents the resource gvr of CustomResources."
                }
              }
            }
          }
        ],
        "tags": [
          "Aggregation"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/cloudshells": {
      "post": {
        "summary": "CreateCloudShell create a cloudshell in golobal cluster.",
        "operationId": "CloudShell_CreateCloudShell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CloudShell"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance specified the karmada instance name for cloudshell.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/v1alpha1CloudShell",
                  "description": "cloud_shell defines the data of cloud shell."
                }
              },
              "title": "CreateIngressResponse the response of create cluster ingresses"
            }
          }
        ],
        "tags": [
          "CloudShell"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/cloudshells/{name}": {
      "get": {
        "summary": "GetCloudShell get a cloudshell in golobal cluster.",
        "operationId": "CloudShell_GetCloudShell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CloudShell"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance specified the karmada instance name for cloudshell.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name specified the cloudshell name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CloudShell"
        ]
      },
      "delete": {
        "summary": "DeleteCloudShell delete a cloudshell in golobal cluster.",
        "operationId": "CloudShell_DeleteCloudShell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance specified the karmada instance name for cloudshell.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name specified the cloudshell name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CloudShell"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusteroverridepolicies": {
      "get": {
        "summary": "ListOverridePolicies return all OverridePolicy for a given namespace and instance",
        "operationId": "Policy_ListClusterOverridePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClusterOverridePoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "apiVersion",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "post": {
        "summary": "CreateClusterOverridePolicy creates an override policy under the namespaces of a specific instance",
        "operationId": "Policy_CreateClusterOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateClusterOverridePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the OverridePolicy YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusteroverridepolicies/{name}": {
      "get": {
        "summary": "GetClusterOverridePolicy gets override policy under the namespaces of a specific instance",
        "operationId": "Policy_GetClusterOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetClusterOverridePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the override belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "DeleteClusterOverridePolicy deletes an override policy under the namespaces of a specific instance",
        "operationId": "Policy_DeleteClusterOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of override policy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "put": {
        "summary": "UpdateClusterOverridePolicy patches an override policy under the namespaces of a specific instance",
        "operationId": "Policy_UpdateClusterOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateClusterOverridePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the override policy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The json data of updating."
                }
              },
              "description": "The request of updating deployment."
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusteroverridepolicies/{name}/json": {
      "get": {
        "summary": "GetClusterOverridePolicyJSON gets override policy by JSON under the namespaces of a specific instance",
        "operationId": "Policy_GetClusterOverridePolicyJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetClusterOverridePolicyJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the override belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusterpropagationpolicies": {
      "get": {
        "summary": "ListPropagationPolicies return all ClusterPropagationPolicy for a given instance and namespace",
        "operationId": "Policy_ListClusterPropagationPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClusterPropagationPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "apiVersion",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "post": {
        "summary": "CreateClusterPropagationPolicy creates a propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_CreateClusterPropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateClusterPropagationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified Cluster propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the ClusterPropagationPolicy YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusterpropagationpolicies/{name}": {
      "get": {
        "summary": "GetClusterPropagationPolicy gets propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_GetClusterPropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetClusterPropagationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the propagation belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "DeleteClusterPropagationPolicy deletes a propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_DeleteClusterPropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of propagation policy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "put": {
        "summary": "UpdateClusterPropagationPolicy updates a propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_UpdateClusterPropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateClusterPropagationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the propagation policy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The json data of updating."
                }
              },
              "description": "The request of updating deployment."
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusterpropagationpolicies/{name}/json": {
      "get": {
        "summary": "GetClusterPropagationPolicyJSON gets propagation policy by JSON under the namespaces of a specific instance",
        "operationId": "Policy_GetClusterPropagationPolicyJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetClusterPropagationPolicyJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the propagation belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters": {
      "get": {
        "summary": "ListJoinedCluster Get the list of clusters that have been added to karmada",
        "operationId": "Cluster_ListJoinedClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "kubernetesVersion",
            "description": "KUBERNETESVERSION cluster k8s version use to support search sub cluster at\nListClusters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phases is used for filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "managedBy",
            "description": "ManagedBy represents who manages the cluster",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the cluster list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the cluster list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Name of cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "description": "Region represents the region of the member cluster locate in.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider",
            "description": "Provider represents the cloud provider name of the member cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "zone",
            "description": "Zone represents the zone of the member cluster locate in.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter clusters.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used  to filter the clusters.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterSelector",
            "description": "A cluster selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "allCluster",
            "description": "list all kpanda clusters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters-labels": {
      "get": {
        "summary": "ListClustersLabels list all member cluster labels.",
        "operationId": "Cluster_ListClustersLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClustersLabelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters-locations": {
      "get": {
        "summary": "ListClustersDeploymentLocationSummary all kpanda-cluster's zones and regions.",
        "operationId": "Cluster_ListClustersLocationSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClustersLocationsSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters/{cluster}/ingressclasssummary": {
      "get": {
        "summary": "ListIngressClassSummary gets a list of ingressClass simple information\nfrom the system by given cluster name",
        "operationId": "Networking_ListIngressClassForMemberCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListIngressClassSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance is the ingressClass belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Cluster is the name of the cluster, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters/{cluster}/namespaces/{namespace}/cronjobs/{cronjob}/jobs": {
      "get": {
        "summary": "ListJobsByCronJobsName lists Jobs By CronJobs's Name under the namespaces\nof a specific instance",
        "operationId": "Batch_ListJobsByCronJobsName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListJobsByCronJobNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Cluster represents which cluster the job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cronjob",
            "description": "Cronjob name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Represents the current state of a cron job.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the job list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the job list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Cronjob name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters/{cluster}/namespaces/{namespace}/pods": {
      "get": {
        "summary": "ListPodsForMemberCluster will list all pod by given instance, cluster and namespace",
        "operationId": "Core_ListPodsForMemberCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListPodsForMemberClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the pod was populated by.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Cluster represents which cluster the pod belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced pod.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of pod.\n\n - KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.\n - StatefulSet: StatefulSet is the workload API object used to manage stateful\napplications.\n - DaemonSet: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.\n - Service: Service to expose an application running on a set of Pods.\n - Job: Job is used to express a one-time task.\n - CronJob: CronJob runs repeatedly according to its time schedule.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment",
              "StatefulSet",
              "DaemonSet",
              "Service",
              "Job",
              "CronJob"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "kindName",
            "description": "Name of kind.\nIf the kind is Deployment,\nthis presents the name of the deployment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for pod name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phases is used for filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters/{cluster}/namespaces/{namespace}/secrets": {
      "get": {
        "summary": "ListSecretsForMemberCluster will list all secrets by given instance, cluster and namespace",
        "operationId": "Core_ListSecretsForMemberCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListSecretsForMemberClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Cluster represents which cluster the services belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "The name use to search specific secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters/{cluster}/namespaces/{namespace}/services": {
      "get": {
        "summary": "ListServicesForMemberCluster will list all services by given instance, cluster and namespace",
        "operationId": "Core_ListServicesForMemberCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListServicesForMemberClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Cluster represents which cluster the services belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.\n\n - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.\n - StatefulSet: StatefulSet is the workload API object used to manage stateful\napplications.\n - DaemonSet: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment",
              "StatefulSet",
              "DaemonSet"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the service list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the service list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "type",
            "description": "Type is a array used for frontend filter.\nUse examples: type=CLUSTER_IP&type=NODE_PORT.\n\n - SERVICE_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - ClusterIP: ClusterIP means a service will only be accessible inside the cluster, via\nthe cluster IP.\n - NodePort: NodePort means a service will be exposed on one port of every node, in\naddition to 'ClusterIP' type.\n - LoadBalancer: LoadBalancer means a service will be exposed via an external load balancer\n(if the cloud provider supports it), in addition to 'NodePort' type.\n - ExternalName: ExternalName means a service consists of only a reference to an external\nname that kubedns or equivalent will return as a CNAME record, with no\nexposing or proxying of any pods involved.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SERVICE_TYPE_UNSPECIFIED",
                "ClusterIP",
                "NodePort",
                "LoadBalancer",
                "ExternalName"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/clusters/{name}": {
      "delete": {
        "summary": "RemoveJoinedCluster Remove the cluster that has been added to karmada",
        "operationId": "Cluster_RemoveJoinedCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "cluster name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster.metadata.name",
            "description": "Name must be unique within a namespace. Is required when creating\nresources, although some resources may allow a client to request the\ngeneration of an appropriate name automatically. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.metadata.namespace",
            "description": "Namespace defines the space within each name must be unique. An empty\nnamespace is equivalent to the \"default\" namespace, but \"default\" is the\ncanonical representation. Not all objects are required to be scoped to a\nnamespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.metadata.uid",
            "description": "UID is the unique in time and space value for this object. It is typically\ngenerated by the server on successful creation of a resource and is not\nallowed to change on PUT operations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.metadata.resourceVersion",
            "description": "An opaque value that represents the internal version of this object that\ncan be used by clients to determine when objects have changed. May be used\nfor optimistic concurrency, change detection, and the watch operation on a\nresource or set of resources. Clients must treat these values as opaque and\npassed unmodified back to the server. They may only be valid for a\nparticular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.metadata.creationTimestamp",
            "description": "CreationTimestamp is a timestamp representing the server time when this\nobject was created. It is not guaranteed to be set in happens-before order\nacross separate operations. Clients may not set this value. It is\nrepresented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "cluster.metadata.deletionTimestamp",
            "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be\ndeleted. This field is set by the server when a graceful deletion is\nrequested by the user, and is not directly settable by a client. The\nresource is expected to be deleted (no longer visible from resource lists,\nand not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items,\ndeletion is blocked. Once the deletionTimestamp is set, this value may not\nbe unset or be set further into the future, although it may be shortened or\nthe resource may be deleted prior to this time. For example, a user may\nrequest that a pod is deleted in 30 seconds. The Kubelet will react by\nsending a graceful termination signal to the containers in the pod. After\nthat 30 seconds, the Kubelet will send a hard termination signal (SIGKILL)\nto the container and after cleanup, remove the pod from the API. In the\npresence of network partitions, this object may still exist after this\ntimestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "cluster.metadata.cluster",
            "description": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in\ndifferent clusters. This field is not set anywhere right now and apiserver\nis going to ignore it if set in create or update request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.metadata.workspaceAlias",
            "description": "The name of the workspace which the object belongs to.\nThis is used to distinguish resources with same name and namespace in\ndifferent workspaces. This field is not set anywhere right now and\napiserver is going to ignore it if set in create or update request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.metadata.finalizers",
            "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cluster.spec.provider",
            "description": "Provider represents the cloud provider name of the member cluster.\n\n - GENERIC: Generic\nGENERIC indicates other providers\n - DAOCLOUD_KUBESPRAY: DaoCloud\nDAOCLOUD_KUBESPRAY indicates a provider of DaoCloud's KubeSpray Engine\n - DAOCLOUD_CLUSTER_API: DAOCLOUD_CLUSTER_API indicates a provider of DaoCloud's Cluster API Engine\n - DAOCLOUD_DCE4: DAOCLOUD_DCE4 indicates a provider of DaoCloud's DCE4 Engine\n - REDHAT_OPENSHIFT4: OverSea Distribtion\nREDHAT_OPENSHIFT4 indicates a provider of RedHat Openshift4\n - SUSE_RANCHER: SUSE_RANCHER indicates a provider of SUSE Rancher\n - VMWARE_TANZU: VMWARE_TANZU indicates a provider of VMware Tanzu\n - AWS_EKS: Public Cloud\nAWS_EKS indicates a provider of AWS EKS\n - ALIYUN_ACK: ALIYUN_ACK indicates a provider of Aliyun ACK\n - TENCENT_TKE: TENCENT_TKE indicates a provider of Tencent TKE.\n - HUAWEI_CCE: TENCENT_TKE indicates a provider of Huawei CCE.\n - MICROSOFT_AZURE: MICROSOFT_AZURE=11; indicates a provider of Microsoft Azure.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GENERIC",
              "DAOCLOUD_KUBESPRAY",
              "DAOCLOUD_CLUSTER_API",
              "DAOCLOUD_DCE4",
              "REDHAT_OPENSHIFT4",
              "SUSE_RANCHER",
              "VMWARE_TANZU",
              "AWS_EKS",
              "ALIYUN_ACK",
              "TENCENT_TKE",
              "HUAWEI_CCE",
              "MICROSOFT_AZURE"
            ],
            "default": "GENERIC"
          },
          {
            "name": "cluster.spec.apiEndpoint",
            "description": "The API endpoint of the member cluster. This can be a hostname,\nhostname:port, IP or IP:port.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.region",
            "description": "Region represents the region of the member cluster locate in.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.zone",
            "description": "Zone represents the zone of the member cluster locate in.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.roles",
            "description": "Roles represents the roles of cluster.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "cluster.spec.managedBy",
            "description": "ManagedBy is used for worker cluster to show\ncluster is controlled by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.aliasName",
            "description": "AliasName represents the alias of the cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.secretRef.name",
            "description": "Name is the name of resource being referenced.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.secretRef.namespace",
            "description": "Namespace is the namespace for the resource being referenced.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.spec.secretRef.resourceVersion",
            "description": "ResourceVersion is the version of resource being referenced.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.status.kubernetesVersion",
            "description": "KubernetesVersion represents version of the member cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.status.kubeSystemID",
            "description": "KubeSystemId represents the uuid of sub cluster kube-system namespace.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.status.serviceCIDR",
            "description": "ServiceCIDR represents the service network CIDR.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.status.podCIDR",
            "description": "PodCIDR represents the pod network CIDR.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster.status.phase",
            "description": "Condition represents the status of the member cluster.\n\n - CLUSTER_PHASE_UNSPECIFIED: The cluster state is unspecified.\n - UNKNOWN: The cluster state is unknown.\n - CREATING: The cluster is being created.\n - RUNNING: The cluster is running.\n - UPDATING: The cluster is updating.\n - DELETING: The cluster is being deleted.\n - FAILED: The cluster operations failed.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CLUSTER_PHASE_UNSPECIFIED",
              "UNKNOWN",
              "CREATING",
              "RUNNING",
              "UPDATING",
              "DELETING",
              "FAILED"
            ],
            "default": "CLUSTER_PHASE_UNSPECIFIED"
          },
          {
            "name": "cluster.status.cpuUsage",
            "description": "The cpu usage of the member cluster.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "cluster.status.memoryUsage",
            "description": "The memory usage of the member cluster.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "cluster.status.proxyMode",
            "description": "ProxyMode represents the kube-proxy mode of the member cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      },
      "post": {
        "summary": "JoinCluster join the kpanda cluster to karmada.",
        "operationId": "Cluster_JoinCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "cluster name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cluster": {
                  "$ref": "#/definitions/v1alpha1Cluster",
                  "title": "the joined member cluster"
                }
              },
              "title": "Join cluster into karamada control plane,"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      },
      "put": {
        "summary": "UpdateJoinedCluster Update the cluster that has been added to karmada",
        "operationId": "Cluster_UpdateJoinedCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "cluster name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cluster": {
                  "$ref": "#/definitions/v1alpha1Cluster",
                  "title": "the joined member cluster"
                }
              },
              "title": "Join cluster into karamada control plane,"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/configmaps": {
      "get": {
        "summary": "ListInstanceMaps lists all the configmaps",
        "operationId": "Core_ListInstanceConfigMaps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListConfigMapsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "name is used for query.\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/crd-groups": {
      "get": {
        "summary": "ListCustomResourceDefinitionGroups lists all groups of customResourceDefinitions in the specified cluster",
        "operationId": "Apiextensions_ListCustomResourceDefinitionGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListCustomResourceDefinitionGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster to request",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/cronjobs": {
      "get": {
        "summary": "ListClusterCronJobs lists instance cronJobs under the namespaces of a\nspecific cluster",
        "operationId": "Batch_ListInstanceCronJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceCronJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Status represents the current state of a job.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Name of the job.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/customresourcedefinitions": {
      "get": {
        "summary": "ListCustomResourceDefinitions lists customResourceDefinitions in the specified cluster",
        "operationId": "Apiextensions_ListCustomResourceDefinitions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListCustomResourceDefinitionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster cluster to be queried",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name search the custom resource definitions fo name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Status search the custom resource definitions fo status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group is to filter customResourceDefinitions by group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "post": {
        "summary": "CreateCustomResourceDefinition creates a customResourceDefinition to the\nsystem by given customResourceDefinition data",
        "operationId": "Apiextensions_CreateCustomResourceDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateCustomResourceDefinitionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the specified customResourceDefinition belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data field is the customResourceDefinition YAML details."
                }
              },
              "title": "CreateCustomResourceDefinitionRequest represents post request to a\ncustomResourceDefinition"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/customresourcedefinitions/{name}": {
      "get": {
        "summary": "GetCustomResourceDefinition gets a customResourceDefinition from\nthe system by given customResourceDefinition name",
        "operationId": "Apiextensions_GetCustomResourceDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CustomResourceDefinition"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResourceDefinition belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResourceDefinition.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "delete": {
        "summary": "DeleteCustomResourceDefinition deletes a customResourceDefinition from the\nsystem by given customResourceDefinition name",
        "operationId": "Apiextensions_DeleteCustomResourceDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the specified customResourceDefinition belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the metadata.name of the referenced customResourceDefinition.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "put": {
        "summary": "UpdateCustomResourceDefinition updates a customResourceDefinition from the\nsystem by given customResourceDefinition name",
        "operationId": "Apiextensions_UpdateCustomResourceDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateCustomResourceDefinitionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the specified customResourceDefinition belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the resource name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data field is the customResourceDefinition YAML details."
                }
              },
              "title": "UpdateCustomResourceDefinitionRequest represents put request to a\ncustomResourceDefinition"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/customresourcedefinitions/{name}/json": {
      "get": {
        "summary": "GetCustomResourceDefinitionJSON gets a customResourceDefinition json from\nthe system by given customResourceDefinition name",
        "operationId": "Apiextensions_GetCustomResourceDefinitionJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetCustomResourceDefinitionJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResourceDefinition belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResourceDefinition.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/deployments": {
      "get": {
        "summary": "ListInstanceDeployments lists one instance all namespace's deployments",
        "operationId": "Apps_ListInstanceDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceDeploymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phase represents the phase of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/descheduler": {
      "get": {
        "summary": "GetInstanceDescheduler get instance descheduler configuration",
        "operationId": "Instance_GetInstanceDescheduler",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstanceDeschedulerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      },
      "put": {
        "summary": "UpdateInstanceDescheduler Update instance descheduler configuration",
        "operationId": "Instance_UpdateInstanceDescheduler",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "title": "Descheduler enabled"
                },
                "timeout": {
                  "$ref": "#/definitions/v1alpha1DeschedulerTimeout",
                  "title": "Descheduler timeput"
                }
              }
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/events": {
      "get": {
        "summary": "ListInstanceEvents lists all events in the specified cluster,\nregardless of namespace.",
        "operationId": "Core_ListInstanceEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance the events belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "type",
            "description": "Type is used for query, showing events of specified type.\nUse example: type=WARNING&type=NORMAL.\n\n - EVENT_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Normal: Normal is a normal event type.\n - Warning: Warning is a warning event type.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EVENT_TYPE_UNSPECIFIED",
                "Normal",
                "Warning"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "kind",
            "description": "Kind is used for query, showing events of specified involvedObject kind,\ne.g. Node.\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is used for query, showing events of specified involvedObject name,\ne.g. node‘s name when kind is Node.\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/events/kinds": {
      "get": {
        "summary": "ListInstanceEventKinds lists all involvedObject's kinds of events in the\nspecified cluster, regardless of namespace.",
        "operationId": "Core_ListInstanceEventKinds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceEventKindsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance the events belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/failover": {
      "get": {
        "summary": "GetInstanceFailover get instance Failover configuration",
        "operationId": "Instance_GetInstanceFailover",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstanceFailoverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      },
      "put": {
        "summary": "UpdateInstanceFailover Update instance Failover configuration",
        "operationId": "Instance_UpdateInstanceFailover",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "title": "Failover enabled"
                },
                "timeout": {
                  "$ref": "#/definitions/v1alpha1FailoverTimeout",
                  "title": "Failover timeout"
                }
              }
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/federatedhpas": {
      "get": {
        "summary": "ListInstanceFederatedHPAs return all FederatedHPA for a given instance",
        "operationId": "Autoscaling_ListInstanceFederatedHPAs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceFederatedHPAsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance represents which cluster the hpa belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of hpa targetRef.\n\n - KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Deployment: A hpa which targetRef kind is Deployment.\n - StatefulSet: A hpa which targetRef kind is StatefulSet.\n - ReplicaSet: A hpa which targetRef kind is ReplicaSet.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment",
              "StatefulSet",
              "ReplicaSet"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "name",
            "description": "The workload name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/gvr/{group}/{version}/namespaces/{namespace}/{resource}": {
      "get": {
        "summary": "ListCustomResources lists customResources of namespaced scope from the\nsystem",
        "operationId": "Apiextensions_ListCustomResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListCustomResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResources belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResources.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResources.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResources belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResources, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "name is used for query.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "kind represents the resource kind of CustomResources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "post": {
        "summary": "CreateCustomResource creates a customResource of namespaced scope to the\nsystem by given customResource data",
        "operationId": "Apiextensions_CreateCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateCustomResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data field is the CustomResource YAML details."
                }
              },
              "title": "CreateCustomResourceRequest represents create request to create one\nCustomResource of namespaced scope"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/gvr/{group}/{version}/namespaces/{namespace}/{resource}/{name}": {
      "get": {
        "summary": "GetCustomResource gets a customResource of namespaced scope from\nthe system",
        "operationId": "Apiextensions_GetCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CustomResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "delete": {
        "summary": "DeleteCustomResource deletes a customResource of namespaced scope from the\nsystem by given customResource name",
        "operationId": "Apiextensions_DeleteCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "put": {
        "summary": "UpdateCustomResource updates a customResource of namespaced scope from the\nsystem by given customResource name",
        "operationId": "Apiextensions_UpdateCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateCustomResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data field is the CustomResource YAML details."
                }
              },
              "title": "UpdateCustomResourceRequest represents update request to update one\nCustomResource of namespaced scope"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "patch": {
        "summary": "PatchCustomResource patches a customResource of cluster scope from\nthe system by given customResource name",
        "operationId": "Apiextensions_PatchCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchCustomResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "patchType": {
                  "$ref": "#/definitions/PatchCustomResourceRequestPatchType",
                  "description": "The patch type for patching the resources."
                },
                "data": {
                  "type": "string",
                  "description": "The data field is the CustomResource YAML details."
                },
                "subResources": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "title": "PatchCustomResourceRequest represents patch request to update one\nCustomResource of cluster scope"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/gvr/{group}/{version}/namespaces/{namespace}/{resource}/{name}/json": {
      "get": {
        "summary": "GetCustomResourceJSON gets a customResource of namespaced scope json from\nthe system",
        "operationId": "Apiextensions_GetCustomResourceJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetCustomResourceJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/gvr/{group}/{version}/{resource}": {
      "get": {
        "summary": "ListClusterCustomResources lists customResources of cluster scope",
        "operationId": "Apiextensions_ListClusterCustomResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClusterCustomResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResources belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResources.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResources.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResources, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "name is used for query.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "kind represents the resource kind of CustomResources.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "post": {
        "summary": "CreateClusterCustomResource creates a customResource of cluster scope to\nthe system by given customResource data",
        "operationId": "Apiextensions_CreateClusterCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateClusterCustomResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data field is the CustomResource YAML details."
                }
              },
              "title": "CreateClusterCustomResourceRequest represents create request to create one\nCustomResource of cluster scope"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/gvr/{group}/{version}/{resource}/{name}": {
      "get": {
        "summary": "GetClusterCustomResource gets a customResource of cluster scope",
        "operationId": "Apiextensions_GetClusterCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CustomResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "delete": {
        "summary": "DeleteClusterCustomResource deletes a customResource of cluster scope from\nthe system by given customResource name",
        "operationId": "Apiextensions_DeleteClusterCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      },
      "put": {
        "summary": "UpdateClusterCustomResource updates a customResource of cluster scope from\nthe system by given customResource name",
        "operationId": "Apiextensions_UpdateClusterCustomResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateClusterCustomResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data field is the CustomResource YAML details."
                }
              },
              "title": "UpdateClusterCustomResourceRequest represents update request to update one\nCustomResource of cluster scope"
            }
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/gvr/{group}/{version}/{resource}/{name}/json": {
      "get": {
        "summary": "GetClusterCustomResourceJSON gets a customResource json of cluster scope",
        "operationId": "Apiextensions_GetClusterCustomResourceJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetClusterCustomResourceJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the CustomResource belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group represents the resource group of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Version represents the resource version of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource represents the resource name of CustomResource, which is plural.\nYou can find it in plural field of related CRD definition.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of CustomResource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apiextensions"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/ingresses": {
      "get": {
        "summary": "ListInstanceIngresses lists all ingresses in the specified instance.",
        "operationId": "Networking_ListInstanceIngresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceIngressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster is the name of the cluster, must be specified,\nwill return all the ingress of the cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is the number of pages at the beginning.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the number of every page displayed.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy defines sort field, please see message kairship.io.api.types.SortBy.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy defines the type of sort, default type asc, can also specify desc.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Name is the name of the ingress.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/jobs": {
      "get": {
        "summary": "ListInstanceJobs list jobs of a karmada instance",
        "operationId": "Batch_ListInstanceJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Status represents the current state of a job.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Name of the job.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/kubeconfig": {
      "post": {
        "summary": "CreateInstanceAdminKubeConfig create kubeconfig of the karmada instance",
        "operationId": "Instance_CreateInstanceAdminKubeConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstanceKubeConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "expirationSeconds": {
                  "type": "integer",
                  "format": "int32",
                  "description": "ExpirationSeconds is the requested duration of validity of the request."
                }
              },
              "title": "CreateInstanceKubeConfigRequest defines params of create karmada instance kubeConfig"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/deployments": {
      "get": {
        "summary": "ListMemberClusterDeployments lists deployments of member cluster of karmada instance.",
        "operationId": "Apps_ListMemberClusterAllDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterDeploymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "cluster represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/ingresses": {
      "get": {
        "summary": "ListMemberClusterAllIngresses lists ingresses of member cluster of karmada instance.",
        "operationId": "Networking_ListMemberClusterAllIngresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterIngressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "cluster represents which karmada instance the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the ingress belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespaces/{namespace}/deployments": {
      "get": {
        "summary": "ListMemberClusterDeployments lists deployments of member cluster of karmada instance.",
        "operationId": "Apps_ListMemberClusterDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterDeploymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "cluster represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespaces/{namespace}/deployments/{name}:promote": {
      "post": {
        "summary": "PromoteMemberClusterDeployment promote specified deployment of member cluster to multi-cloud deployment.",
        "operationId": "Apps_PromoteMemberClusterDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Instclusterance represents which karmada member cluster the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of deployment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "services": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Service is the deployment dependency resource"
                }
              },
              "title": "PromoteMemberClusterDeploymentRequest the request of promote deployment of member cluster"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespaces/{namespace}/ingresses": {
      "get": {
        "summary": "ListMemberClusterIngresses lists ingresses of member cluster of karmada instance.",
        "operationId": "Networking_ListMemberClusterIngresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterIngressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "cluster represents which karmada instance the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespaces/{namespace}/ingresses/{name}:promote": {
      "post": {
        "summary": "PromoteMemberClusterIngress promote specified ingress of member cluster to multi-cloud ingress.",
        "operationId": "Networking_PromoteMemberClusterIngress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Instclusterance represents which karmada member cluster the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the ingress belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of ingress",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespaces/{namespace}/services": {
      "get": {
        "summary": "ListMemberClusterServices lists services of member cluster of karmada instance.",
        "operationId": "Core_ListMemberClusterServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the serivce belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "cluster represents which karmada instance the serivce belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the serivce belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.\n\n - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespaces/{namespace}/services/{name}:promote": {
      "post": {
        "summary": "PromoteMemberClusterService promote specified service of member cluster to multi-cloud service.",
        "operationId": "Core_PromoteMemberClusterService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Instclusterance represents which karmada member cluster the service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/namespacesummary": {
      "get": {
        "operationId": "Core_ListMemberClusterNamespaceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterNamespaceSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the namespace summary list belong to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/member-clusters/{cluster}/services": {
      "get": {
        "summary": "ListMemberClusterAllServices lists services of member cluster of karmada instance.",
        "operationId": "Core_ListMemberClusterAllServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListMemberClusterServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the serivce belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "cluster represents which karmada instance the serivce belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the serivce belongs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.\n\n - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/metric": {
      "get": {
        "operationId": "Insight_QueryMetric",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PrometheusQueryResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "time",
            "description": "Optional, current server time is used if the time parameter is omitted.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Insight"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/metricsadapter": {
      "get": {
        "summary": "GetInstanceMetricsAdapter get instance metrics adaptor configuration",
        "operationId": "Instance_GetInstanceMetricsAdapter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstanceMetricsAdapterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      },
      "put": {
        "summary": "UpdateInstanceMetricsAdapter Update instance metrics adaptor configuration",
        "operationId": "Instance_UpdateInstanceMetricsAdapter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "title": "MetricsAdapter enabled"
                }
              }
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces": {
      "get": {
        "summary": "ListNamespaces gets all the namespaces of given cluster",
        "operationId": "Core_ListNamespaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListNamespacesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Clusters is to filter namespaces by cluster names",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is to filter namespaces by namespace name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the job list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the job list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "post": {
        "summary": "CreateNamespace creates a namespace from the system by given namespace name",
        "operationId": "Core_CreateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified namespace belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data is the service YAML details."
                }
              },
              "description": "Get Create Namespace information."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/aggregationresource": {
      "post": {
        "summary": "CreateAggregationResource create multi resource for kairship.",
        "operationId": "Aggregation_CreateAggregationResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1AggregationResource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/v1alpha1AggregationResource"
                },
                "gvr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1alpha1GVR"
                  },
                  "description": "GVR represents the resource gvr of CustomResources."
                }
              }
            }
          }
        ],
        "tags": [
          "Aggregation"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/configmaps": {
      "get": {
        "summary": "ListConfigMaps lists configmaps in the specified instance and namespace.",
        "operationId": "Core_ListConfigMaps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListConfigMapsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "name is used for query.\n+optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "post": {
        "summary": "CreateConfigMap creates a configMap under the namespaces of a specific\ninstance",
        "operationId": "Core_CreateConfigMap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateConfigMapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the ConfigMap YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/configmaps/{name}": {
      "get": {
        "summary": "GetConfigMap gets a configMap under the namespaces of a specific instance",
        "operationId": "Core_GetConfigMap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ConfigMap"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "delete": {
        "summary": "DeleteConfigMap deletes a configMap under the namespaces of a specific\ninstance",
        "operationId": "Core_DeleteConfigMap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the metadata.name of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "put": {
        "summary": "UpdateConfigMap updates a configMap under the namespaces of a specific\ninstance",
        "operationId": "Core_UpdateConfigMap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateConfigMapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "data The data field is the ConfigMap YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/configmaps/{name}/json": {
      "get": {
        "summary": "GetConfigMapJSON gets a configMap json under the namespaces of a specific\ninstance",
        "operationId": "Core_GetConfigMapJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetConfigMapJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "patch": {
        "summary": "PatchConfigMap patchs a configMap under the namespaces of a specific\ninstance",
        "operationId": "Core_PatchConfigMap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchConfigMapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced ConfigMap.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "The data is the YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/cronjobs": {
      "get": {
        "summary": "ListCronJobs Lists cronJobs in a specific instance",
        "operationId": "Batch_ListCronJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListCronJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of job to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phase represents the phase of job to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Batch"
        ]
      },
      "post": {
        "summary": "CreateCronjob create job to a karmada instance.",
        "operationId": "Batch_CreateCronJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateCronJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified CronJob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the CronJob YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Batch"
        ]
      },
      "put": {
        "summary": "UpdateCronJob update cronjob to a karmada instance.",
        "operationId": "Batch_UpdateCronJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateCronJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified CronJob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the CronJob YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/cronjobs/{name}": {
      "get": {
        "summary": "GetCronJob gets a cronJob under the namespaces of a specific instance",
        "operationId": "Batch_GetCronJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CronJob"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Cronjob name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      },
      "delete": {
        "summary": "DeleteCronJob deletes a cronJob under the namespaces of a specific instance",
        "operationId": "Batch_DeleteCronJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Cronjob name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/cronjobs/{name}/json": {
      "get": {
        "summary": "GetCronJobJSON get a cronjob json data under the namespaces of a karmada instance.",
        "operationId": "Batch_GetCronJobJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetCronJobJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the CronJob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced CronJob.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/cronjobs/{name}:pause": {
      "post": {
        "summary": "PauseCronJob pauses a cronjob under the namespaces of a specific\ncluster",
        "operationId": "Batch_PauseCronJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PauseCronJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of cronjob",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "paused": {
                  "type": "boolean",
                  "description": "Paused indicates that the cronjob is paused."
                }
              },
              "title": "PauseCronJobRequest the request of pause cronjob"
            }
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/cronjobs/{name}:resume": {
      "post": {
        "summary": "ResumeCronJob resumes a cronjob under the namespaces of a specific\ninstance",
        "operationId": "Batch_ResumeCronJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ResumeCronJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the cronjob belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of cronjob",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "paused": {
                  "type": "boolean",
                  "description": "Paused indicates that the cronjob is paused."
                }
              },
              "title": "ResumeCronJobRequest the request of resume CronJob"
            }
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/deployments": {
      "get": {
        "summary": "ListDeployments lists deployments",
        "operationId": "Apps_ListDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListDeploymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phase represents the phase of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "post": {
        "summary": "CreateDeployment creates a deployment under the namespaces of a specific\ninstance",
        "operationId": "Apps_CreateDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateDeploymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the Deployment YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/deployments/{name}": {
      "get": {
        "summary": "GetDeployment gets a deployment under the namespaces of a specific cluster",
        "operationId": "Apps_GetDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Deployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the workload belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the workload belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of deployment to belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "delete": {
        "summary": "DeleteDeployment deletes a deployment under the namespaces of a specific\ninstance",
        "operationId": "Apps_DeleteDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of deployment",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "put": {
        "summary": "UpdateDeployment update a deployment under the namespaces of a\nspecific instance",
        "operationId": "Apps_UpdateDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateDeploymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified Deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the Deployment YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "patch": {
        "summary": "PatchDeployment patches a deployment under the namespaces of a\nspecific instance",
        "operationId": "Apps_PatchDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchDeploymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "The namespace which the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The json data of patch."
                }
              },
              "description": "The request of patching deployment."
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/deployments/{name}/json": {
      "get": {
        "summary": "GetDeploymentJSON gets deployment by JSON under the namespaces of a specific\ninstance",
        "operationId": "Apps_GetDeploymentJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetDeploymentJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the configmap belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced Deployment.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/deployments/{name}:pause": {
      "post": {
        "summary": "PauseDeployment pauses a deployment under the namespaces of a specific\ninstance",
        "operationId": "Apps_PauseDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PauseDeploymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of deployment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/deployments/{name}:restart": {
      "post": {
        "summary": "RestartDeployment restarts a deployment under the namespaces of a specific\ninstance",
        "operationId": "Apps_RestartDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1RestartDeploymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of deployment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/deployments/{name}:resume": {
      "post": {
        "summary": "ResumeDeployment resumes a deployment under the namespaces of a specific\ninstance",
        "operationId": "Apps_ResumeDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ResumeDeploymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of deployment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/events": {
      "get": {
        "summary": "ListEvents lists events under the namespaces of a specific instance",
        "operationId": "Core_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance represents the name of deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "Kind represents what type of event is needed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kindName",
            "description": "Name stands for event name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the event list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the event list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "type",
            "description": "Type is used for query, showing events of specified type.\nUse example: type=WARNING&type=NORMAL.\n\n - EVENT_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Normal: Normal is a normal event type.\n - Warning: Warning is a warning event type.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EVENT_TYPE_UNSPECIFIED",
                "Normal",
                "Warning"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/federatedhpas": {
      "get": {
        "summary": "ListHorizontalPodAutoscalers lists hpas in the specified cluster and namespace.",
        "operationId": "Autoscaling_ListFederatedHPAs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListFederatedHPAsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance represents which cluster the hpa belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced hpa.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of hpa targetRef.\n\n - KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Deployment: A hpa which targetRef kind is Deployment.\n - StatefulSet: A hpa which targetRef kind is StatefulSet.\n - ReplicaSet: A hpa which targetRef kind is ReplicaSet.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment",
              "StatefulSet",
              "ReplicaSet"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "name",
            "description": "The workload name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      },
      "post": {
        "summary": "CreateFederatedHPA creates a hpa by given json.",
        "operationId": "Autoscaling_CreateFederatedHPA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateFederatedHPAResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the specified hpa belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the hpa YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/federatedhpas/{name}": {
      "get": {
        "summary": "GetFederatedHPA gets hpa under the namespaces of a specific instance",
        "operationId": "Autoscaling_GetFederatedHPA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetFederatedHPAResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the pod belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced FederatedHPA.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "FederatedHPA name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      },
      "delete": {
        "summary": "DeleteFederatedHPA deletes a hpa by given name.",
        "operationId": "Autoscaling_DeleteFederatedHPA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the hpa belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced hpa.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the metadata.name of the referenced hpa.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      },
      "put": {
        "summary": "UpdateFederatedHPA updates the specified hpa, the body must\nbe a JSON string.",
        "operationId": "Autoscaling_UpdateFederatedHPA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateFederatedHPAResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the specified hpa belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced hpa.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "data The data field is the hpa YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/federatedhpas/{name}/json": {
      "get": {
        "summary": "GetFederatedHPAJSON gets the hpa by namespace and name,\nreturns a string in JSON format.",
        "operationId": "Autoscaling_GetFederatedHPAJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetFederatedHPAJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the pod belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced FederatedHPA.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "FederatedHPA name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Autoscaling"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/ingresses": {
      "get": {
        "summary": "ListIngresses lists all ingresses in the specified instance and namespace.",
        "operationId": "Networking_ListIngresses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListIngressesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance is the name of the instance, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is the number of pages at the beginning.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the number of every page displayed.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy defines sort field, please see message kairship.io.api.types.SortBy.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy defines the type of sort, default type asc, can also specify desc.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Name is the name of the ingress.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Networking"
        ]
      },
      "post": {
        "summary": "CreateIngress creates a ingress in the specified cluster and namespace.",
        "operationId": "Networking_CreateIngress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateIngressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance is the name of the instance, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data is the ingress YAML details."
                }
              },
              "title": "CreateIngressRequest the request of create cluster ingresses"
            }
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/ingresses/{name}": {
      "get": {
        "summary": "GetIngress gets the ingress by namespace and name.",
        "operationId": "Networking_GetIngress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Ingress"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster is the name of the cluster, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the name of the ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Networking"
        ]
      },
      "delete": {
        "summary": "DeleteIngress deletes the ingress by name.",
        "operationId": "Networking_DeleteIngress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster is the name of the cluster, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the name of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Networking"
        ]
      },
      "put": {
        "summary": "UpdateIngress updates the specified ingress, the body must be a JSON\nstring.",
        "operationId": "Networking_UpdateIngress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateIngressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance is the name of the instance, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the name of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data is the ingress YAML details."
                }
              },
              "title": "UpdateIngressRequest the request of update cluster ingresses"
            }
          }
        ],
        "tags": [
          "Networking"
        ]
      },
      "patch": {
        "summary": "PatchIngress patches the specified ingress, the body must be a JSON string.",
        "operationId": "Networking_PatchIngress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchIngressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance is the name of the cluster, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The data defines the update details of ingress."
                }
              },
              "title": "PatchIngressRequest the request of patch cluster ingresses"
            }
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/ingresses/{name}/json": {
      "get": {
        "summary": "GetIngressJSON gets the ingress by namespace and name, returns a string in JSON\nformat.",
        "operationId": "Networking_GetIngressJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetIngressJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance is the name of the instance, return all the ingress of the cluster\nbe specified.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace specified the namespace of ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name is the name of the ingress.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stable",
            "description": "If stable is true, the v1 version under the corresponding package will be returned.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Networking"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/jobs": {
      "get": {
        "summary": "ListJobs lists jobs in a karmada instance",
        "operationId": "Batch_ListJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of job to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phase represents the phase of job to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Batch"
        ]
      },
      "post": {
        "summary": "CreateJob create job to a karmada instance.",
        "operationId": "Batch_CreateJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified Job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the Job YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/jobs/{name}": {
      "get": {
        "summary": "GetJob gets a job under the namespaces of a karmada instance.",
        "operationId": "Batch_GetJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Job"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name of the job.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      },
      "delete": {
        "summary": "DeleteJob deletes a job under the namespaces of a karmada instance.",
        "operationId": "Batch_DeleteJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name of the job.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/jobs/{name}/json": {
      "get": {
        "summary": "GetJobJSON get a job json data under the namespaces of a karmada instance.",
        "operationId": "Batch_GetJobJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetJobJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the Job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced Job.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/jobs/{name}:restart": {
      "post": {
        "summary": "RestartJob restarts a job under the namespaces of a karmada instance.",
        "operationId": "Batch_RestartJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1RestartJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified job belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name of the job.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "resourceVersion": {
                  "type": "string",
                  "description": "ResourceVersion of the job."
                }
              },
              "description": "Get restart job information."
            }
          }
        ],
        "tags": [
          "Batch"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/overridepolicies": {
      "get": {
        "summary": "ListOverridePolicies return all OverridePolicy for a given namespace and instance",
        "operationId": "Policy_ListOverridePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListOverridePoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced pod.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "apiVersion",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "post": {
        "summary": "CreateOverridePolicy creates an override policy under the namespaces of a specific instance",
        "operationId": "Policy_CreateOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateOverridePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the OverridePolicy YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/overridepolicies/{name}": {
      "get": {
        "summary": "GetOverridePolicy gets override policy under the namespaces of a specific instance",
        "operationId": "Policy_GetOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetOverridePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the override belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced OverridePolicy.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "DeleteOverridePolicy deletes an override policy under the namespaces of a specific instance",
        "operationId": "Policy_DeleteOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of override policy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "put": {
        "summary": "UpdateOverridePolicy patches an override policy under the namespaces of a specific instance",
        "operationId": "Policy_UpdateOverridePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateOverridePolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "The namespace which the override policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the override policy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The json data of updating."
                }
              },
              "description": "The request of updating deployment."
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/overridepolicies/{name}/json": {
      "get": {
        "summary": "GetOverridePolicyJSON gets override policy by JSON under the namespaces of a specific instance",
        "operationId": "Policy_GetOverridePolicyJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apipolicyv1alpha1GetOverridePolicyJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the override belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced OverridePolicy.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/propagationpolicies": {
      "get": {
        "summary": "ListPropagationPolicies return all PropagationPolicy for a given instance and namespace",
        "operationId": "Policy_ListPropagationPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListPropagationPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "karmada instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced pod.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "apiVersion",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "post": {
        "summary": "CreatePropagationPolicy creates a propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_CreatePropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreatePropagationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the PropagationPolicy YAML details"
                }
              }
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/propagationpolicies/{name}": {
      "get": {
        "summary": "GetPropagationPolicy gets propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_GetPropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPropagationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the propagation belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced PropagationPolicy.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "delete": {
        "summary": "DeletePropagationPolicy deletes a propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_DeletePropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace represents which namespace the propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents the name of propagation policy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      },
      "put": {
        "summary": "UpdatePropagationPolicy updates a propagation policy under the namespaces of a specific instance",
        "operationId": "Policy_UpdatePropagationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePropagationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "The namespace which the propagation policy belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the propagation policy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The json data of updating."
                }
              },
              "description": "The request of updating deployment."
            }
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/propagationpolicies/{name}/json": {
      "get": {
        "summary": "GetPropagationPolicyJSON gets propagation policy by JSON under the namespaces of a specific instance",
        "operationId": "Policy_GetPropagationPolicyJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPropagationPolicyJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which instance the propagation belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced PropagationPolicy.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/registries": {
      "get": {
        "summary": "ListRegistries returns a list of registries",
        "operationId": "Image_ListRegistries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListRegistriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "global",
            "description": "Global is to list all global registries.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Image"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/registries/{registry}/projects": {
      "get": {
        "summary": "ListProjects returns a list of projects of specified registry",
        "operationId": "Image_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "registry",
            "description": "Registry is registry name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "public",
            "description": "Public is distinguish public projects and private projects.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Image"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/registries/{registry}/projects/{project}/repositories": {
      "get": {
        "summary": "ListRepositories returns a list of image names of specified project",
        "operationId": "Image_ListRepositories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListRepositoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "registry",
            "description": "Registry is registry name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project is the project to request, \"/\" is a possible value.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fuzzyName",
            "description": "FuzzyName is used to fuzzy search by multiple parameters including name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "showArtifacts",
            "description": "ShowArtifacts is to list artifacts of per image, default false.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Image"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/registries/{registry}/projects/{project}/repositories/{repository}/artifacts": {
      "get": {
        "summary": "ListArtifacts returns a list of tags of specified image",
        "operationId": "Image_ListArtifacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListArtifactsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "registry",
            "description": "Registry is registry name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project is the project to request.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "repository",
            "description": "Repository is image name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workspaceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Image"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/secrets": {
      "get": {
        "summary": "ListSecrets lists secrets",
        "operationId": "Core_ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "The name use to search specific secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "post": {
        "summary": "CreateSecret creates a secret under the namespaces of a specific\ninstance",
        "operationId": "Core_CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in yaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data is the Secret YAML details"
                }
              },
              "description": "Create Secret in the cluster."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/secrets/{name}": {
      "get": {
        "summary": "GetSecret gets a secret under the namespaces of a specific cluster",
        "operationId": "Core_GetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Secret"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Secret name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "delete": {
        "summary": "DeleteSecret deletes a secret under the namespaces of a specific\ninstance",
        "operationId": "Core_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Secret name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "put": {
        "summary": "UpdateSecret updates a secret under the namespaces of a\nspecific instance",
        "operationId": "Core_UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Secret name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "The data field is the Secret YAML details"
                }
              },
              "description": "Update Secret in the cluster."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "patch": {
        "summary": "PatchSecret patches a secret under the namespaces of a\nspecific instance",
        "operationId": "Core_PatchSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The data is the secret YAML details."
                }
              },
              "description": "Patches the current secret."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/secrets/{name}/json": {
      "get": {
        "summary": "GetSecretJSON gets secret by JSON under the namespaces of a specific\ninstance",
        "operationId": "Core_GetSecretJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetSecretJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Secret name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/services": {
      "get": {
        "summary": "ListServices lists services",
        "operationId": "Core_ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "kind",
            "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment.\n\n - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.\n - StatefulSet: StatefulSet is the workload API object used to manage stateful\napplications.\n - DaemonSet: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "KIND_UNSPECIFIED",
              "Deployment",
              "StatefulSet",
              "DaemonSet"
            ],
            "default": "KIND_UNSPECIFIED"
          },
          {
            "name": "kindName",
            "description": "Name of kind.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the service list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "OrderBy determines the service list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "type",
            "description": "Type is a array used for frontend filter.\nUse examples: type=CLUSTER_IP&type=NODE_PORT.\n\n - SERVICE_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - ClusterIP: ClusterIP means a service will only be accessible inside the cluster, via\nthe cluster IP.\n - NodePort: NodePort means a service will be exposed on one port of every node, in\naddition to 'ClusterIP' type.\n - LoadBalancer: LoadBalancer means a service will be exposed via an external load balancer\n(if the cloud provider supports it), in addition to 'NodePort' type.\n - ExternalName: ExternalName means a service consists of only a reference to an external\nname that kubedns or equivalent will return as a CNAME record, with no\nexposing or proxying of any pods involved.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SERVICE_TYPE_UNSPECIFIED",
                "ClusterIP",
                "NodePort",
                "LoadBalancer",
                "ExternalName"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "post": {
        "summary": "CreateService creates a service under the namespaces of a specific\ninstance",
        "operationId": "Core_CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in\nyaml",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "Data is the Service YAML details"
                }
              },
              "description": "Create Service in the cluster."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/services/{name}": {
      "get": {
        "summary": "GetService gets a service under the namespaces of a specific cluster",
        "operationId": "Core_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the service name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "delete": {
        "summary": "DeleteService deletes a service under the namespaces of a specific\ninstance",
        "operationId": "Core_DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster represents which cluster the service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced service.\nThis field is required in all cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the service name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "put": {
        "summary": "UpdateService updates a service under the namespaces of a\nspecific instance",
        "operationId": "Core_UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the service name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "title": "Data is the Service YAML details"
                }
              },
              "description": "Update the Service information."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "patch": {
        "summary": "PatchService patches a service under the namespaces of a\nspecific instance",
        "operationId": "Core_PatchService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The data is the service YAML details."
                }
              }
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/services/{name}/json": {
      "get": {
        "summary": "GetServiceJSON gets service by JSON under the namespaces of a specific\ninstance",
        "operationId": "Core_GetServiceJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetServiceJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Namespace the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the service name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{namespace}/workloadservices": {
      "post": {
        "summary": "CreateWorkloadService creates a service under the namespaces of a specific\ninstance and auto create related propagation propagationpolicy according to\na given workload",
        "operationId": "Core_CreateWorkloadService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "When the current namespace is named, the priority is higher than that in\nworkloadService",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "kind": {
                  "$ref": "#/definitions/v1alpha1CreateWorkloadServiceRequestKind",
                  "description": "The kind of service.\nIf the kind is Deployment,\nthis presents the name of the deployment."
                },
                "kindName": {
                  "type": "string",
                  "description": "Name of kind."
                },
                "data": {
                  "type": "string",
                  "title": "Data is the Service YAML details"
                }
              },
              "description": "Create Service in the cluster."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{name}": {
      "get": {
        "summary": "GetNamespace gets a namespace from the system by given namespace\nname",
        "operationId": "Core_GetNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the namespace belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the requested namespace name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "delete": {
        "summary": "DeleteNamespace deletes a namespace from the system by given namespace name",
        "operationId": "Core_DeleteNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified namespace belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "put": {
        "summary": "UpdateNamespace updates a namespace from the system by given namespace name",
        "operationId": "Core_UpdateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified namespace belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data is the namespace YAML details."
                }
              },
              "description": "Update Namespace information."
            }
          }
        ],
        "tags": [
          "Core"
        ]
      },
      "patch": {
        "summary": "PatchNamespace patches a namespace from the system by given namespace name",
        "operationId": "Core_PatchNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PatchNamespaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified namespace belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name represents for the resource name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The data is the namespace YAML details."
                }
              }
            }
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespaces/{name}/json": {
      "get": {
        "summary": "GetNamespaceJSON gets a namespace json from the system by given namespace\nname",
        "operationId": "Core_GetNamespaceJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetNamespaceJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Cluster the namespace belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name represents for the requested namespace name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/namespacesummary": {
      "get": {
        "summary": "ListNamespaceSummary gets a list of namespace simple information\nfrom the system by given instance name",
        "operationId": "Core_ListNamespaceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListNamespaceSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the namespace summary list belong to.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/overridepolicies": {
      "get": {
        "summary": "ListInstanceOverridePolicies return all OverridePolicy for a given instance",
        "operationId": "Policy_ListInstanceOverridePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceOverridePoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phase represents the phase of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/propagationpolicies": {
      "get": {
        "summary": "ListInstancePropagationPolicies return all PropagationPolicy for a given instance",
        "operationId": "Policy_ListInstancePropagationPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstancePropagationPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the deployment belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page is current page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size is the data number shown per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Name represents the name of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phase represents the phase of workloads to search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Policy"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/range-metric": {
      "get": {
        "operationId": "Insight_QueryRangeMetric",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1PrometheusQueryRangeResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "tags": [
          "Insight"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/secrets": {
      "get": {
        "summary": "ListInstanceSecrets lists all secrets of the instance",
        "operationId": "Core_ListInstanceSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance represents which karmada instance the secret belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "namespace",
            "description": "Namespace is the metadata.namespace of the referenced secret.\nThis field is required in all cases.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name use to search specific secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "SortDir determines the list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{instance}/services": {
      "get": {
        "summary": "ListInstanceServices lists all the services",
        "operationId": "Core_ListInstanceServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstanceServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "Instance the specified service belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Name stands for service name, used for fuzzy search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the service list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the service list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "type",
            "description": "Type is a array used for frontend filter.\nUse examples: type=CLUSTER_IP&type=NODE_PORT.\n\n - SERVICE_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - ClusterIP: ClusterIP means a service will only be accessible inside the cluster, via\nthe cluster IP.\n - NodePort: NodePort means a service will be exposed on one port of every node, in\naddition to 'ClusterIP' type.\n - LoadBalancer: LoadBalancer means a service will be exposed via an external load balancer\n(if the cloud provider supports it), in addition to 'NodePort' type.\n - ExternalName: ExternalName means a service consists of only a reference to an external\nname that kubedns or equivalent will return as a CNAME record, with no\nexposing or proxying of any pods involved.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SERVICE_TYPE_UNSPECIFIED",
                "ClusterIP",
                "NodePort",
                "LoadBalancer",
                "ExternalName"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used to filter",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Core"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{name}": {
      "get": {
        "summary": "GetInstance get the karmadadeployment cr.",
        "operationId": "Instance_GetInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Instance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name specified the instance name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      },
      "delete": {
        "summary": "DeleteInstance delete the karmadadeployment cr.",
        "operationId": "Instance_DeleteInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name specified the instance name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      },
      "put": {
        "summary": "UpdateInstance updates a instance specific instance name.",
        "operationId": "Instance_UpdateInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the instance.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "The json data of update instance."
                }
              },
              "description": "UpdateInstanceRequest defines reuqest params of update instance."
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/instances/{name}/json": {
      "get": {
        "summary": "GetInstance get the karmadadeployment cr json data.",
        "operationId": "Instance_GetInstanceJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstanceJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "name specified the instance name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/kpanda-clusters": {
      "get": {
        "summary": "ListClusters return all cluster from kpanda.",
        "operationId": "Cluster_ListClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "kubernetesVersion",
            "description": "KUBERNETESVERSION cluster k8s version use to support search sub cluster at\nListClusters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phase",
            "description": "Phases is used for filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "managedBy",
            "description": "ManagedBy represents who manages the cluster",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the cluster list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the cluster list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          },
          {
            "name": "name",
            "description": "Name of cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "description": "Region represents the region of the member cluster locate in.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "provider",
            "description": "Provider represents the cloud provider name of the member cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "zone",
            "description": "Zone represents the zone of the member cluster locate in.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labelSelector",
            "description": "LabelSelector is the format after labels.FormatLabels used to filter clusters.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldSelector",
            "description": "FieldSelector is the format after labels.FormatLabels used  to filter the clusters.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterSelector",
            "description": "A cluster selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "allCluster",
            "description": "list all kpanda clusters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/registries/insight": {
      "get": {
        "summary": "DetectInsight returns whether the insight is installed.",
        "operationId": "Insight_DetectInsight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DetectInsightResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Insight"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/registries/kangaroo": {
      "get": {
        "summary": "DetectKangaroo returns whether the kangaroo is installed.",
        "operationId": "Image_DetectKangaroo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DetectKangarooResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Image"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/workspace-management/instances": {
      "get": {
        "summary": "ListInstances Query all instances.",
        "operationId": "Workspace_ListInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListInstancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the instance list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the instance list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Workspace"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/workspace-management/instances/-/actions": {
      "post": {
        "summary": "BindInstances Bind/UnBind an instance to a workspace.",
        "operationId": "Workspace_BindInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1BindInstancesAction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1BindInstancesAction"
            }
          }
        ],
        "tags": [
          "Workspace"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/workspace-management/namespaces": {
      "get": {
        "summary": "ListNamespaceInstances List all namespaces in an instance.",
        "operationId": "Workspace_ListNamespaceInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListNamespaceInstancesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "instance",
            "description": "instance name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the instance list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the instance list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Workspace"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/workspace-management/namespaces/-/actions": {
      "post": {
        "summary": "BindNamespaceInstances Bind/Unbind a namespace in an instance to the workspace.",
        "operationId": "Workspace_BindNamespaceInstances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1BindNamespaceInstancesAction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1BindNamespaceInstancesAction"
            }
          }
        ],
        "tags": [
          "Workspace"
        ]
      }
    },
    "/apis/kairship.io/v1alpha1/workspace-management/workspaces": {
      "get": {
        "summary": "ListWorkspaces List all workspaces",
        "operationId": "Workspace_ListWorkspaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListWorkspacesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workspace",
            "description": "workspace name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "description": "Size per page requested.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "SortBy determines the instance list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "field_name",
              "state",
              "workspace",
              "cluster",
              "namespace",
              "created_at"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "sortDir",
            "description": "OrderBy determines the instance list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "default": "desc"
          }
        ],
        "tags": [
          "Workspace"
        ]
      }
    }
  },
  "definitions": {
    "CronJobStatusCronJobCondition": {
      "type": "object",
      "properties": {
        "jobName": {
          "type": "string",
          "description": "The name of job."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesCondition"
          },
          "description": "Current condition of job."
        }
      },
      "description": "Current condition of cronjob."
    },
    "CronJobStatusCronJobState": {
      "type": "string",
      "enum": [
        "CRONJOB_STATE_UNSPECIFIED",
        "Waiting",
        "Activated",
        "Stopped",
        "Deleting"
      ],
      "default": "CRONJOB_STATE_UNSPECIFIED",
      "description": "Current state of a cron job.\n\n - CRONJOB_STATE_UNSPECIFIED: CronJob is unspecified.\n - Waiting: Waiting for cronjob ready.\n - Activated: The number of pending and running pods.\n - Stopped: CronJob has stopped.\n - Deleting: CronJob is being deleted."
    },
    "CustomResourceDefinitionSpecResourceScope": {
      "type": "string",
      "enum": [
        "RESOURCE_SCOPE_UNSPECIFIED",
        "NAMESPACED",
        "CLUSTER"
      ],
      "default": "RESOURCE_SCOPE_UNSPECIFIED",
      "description": "- RESOURCE_SCOPE_UNSPECIFIED: ResourceScope is unspecified\n - NAMESPACED: Represents which namespace the belongs to.\n - CLUSTER: Cluster the specified belongs to.",
      "title": "ResourceScope is an enum defining the different scopes available to a\ncustom resource"
    },
    "InstanceStatusState": {
      "type": "string",
      "enum": [
        "INSTANCE_STATE_UNSPECIFIED",
        "INSTANCE_STATE_INPROCESS",
        "INSTANCE_STATE_RUNNING",
        "INSTANCE_STATE_TERMINAL",
        "INSTANCE_STATE_UNAVAILABLE",
        "INSTANCE_STATE_UNKNOWN"
      ],
      "default": "INSTANCE_STATE_UNSPECIFIED",
      "description": "State describe the state of instance.\n\n - INSTANCE_STATE_UNSPECIFIED: Unspecified is only a meaningless placeholder, to avoid zero not return.\n - INSTANCE_STATE_INPROCESS: Inprocess is phase karmada instances being installed.\n - INSTANCE_STATE_RUNNING: Running represents karmada instance can be used normally.\n - INSTANCE_STATE_TERMINAL: Terminal is phase karmada instance being deleted.\n - INSTANCE_STATE_UNAVAILABLE: Unavailable represents karmada instance is unusual.\n - INSTANCE_STATE_UNKNOWN: UNKNOWN represents karmada instance is unknown."
    },
    "JobStatusJobState": {
      "type": "string",
      "enum": [
        "JOB_STATE_UNSPECIFIED",
        "Waiting",
        "Running",
        "Completed",
        "Deleting",
        "Failed"
      ],
      "default": "JOB_STATE_UNSPECIFIED",
      "description": "Current state of a job.\n\n - JOB_STATE_UNSPECIFIED: Job is unspecified.\n - Waiting: Waiting for job ready.\n - Running: Job is working.\n - Completed: Jobs has completed.\n - Deleting: Jobs is being deleted.\n - Failed: Jobs is not ready to work ."
    },
    "ListNamespaceSummaryResponseScope": {
      "type": "string",
      "enum": [
        "SCOPE_UNSPECIFIED",
        "Instance",
        "Namespace"
      ],
      "default": "SCOPE_UNSPECIFIED",
      "description": "Scope is an enum defining the different scopes available to the namespaces.\nAllowed values are `Instance` and `Namespace`."
    },
    "PatchCustomResourceRequestPatchType": {
      "type": "string",
      "enum": [
        "PATCH_TYPE_UNSPECIFIED",
        "PATCH_TYPE_JSON",
        "PATCH_TYPE_MERGE",
        "PATCH_TYPE_STRATEGIC_MERGE",
        "PATCH_TYPE_APPLY"
      ],
      "default": "PATCH_TYPE_UNSPECIFIED"
    },
    "PodStatusOwnedBy": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/PodStatusOwnedByKind",
          "description": "The kind of pod."
        },
        "name": {
          "type": "string",
          "title": "Name is the related workload name"
        }
      },
      "title": "OwnedBy states which workload the pod belongs to"
    },
    "PodStatusOwnedByKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "DEPLOYMENT",
        "STATEFULSET",
        "DAEMONSET",
        "REPLICASET"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": "- KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - DEPLOYMENT: A Deployment provides declarative updates for Pods and ReplicaSets.\n - STATEFULSET: StatefulSet is the workload API object used to manage stateful\napplications.\n - DAEMONSET: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.\n - REPLICASET: A pod's owner replicaSet",
      "title": "Kind includes deployment, statefulset, daemonset"
    },
    "apiclusterv1alpha1LocalSecretReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace is the namespace for the resource being referenced."
        },
        "resourceVersion": {
          "type": "string",
          "description": "ResourceVersion is the version of resource being referenced."
        }
      },
      "title": "SecretRef represents the secret contains mandatory credentials to access the member cluster.\nThe secret should hold credentials as follows:\n- secret.data.token\n- secret.data.caBundle\n+optional"
    },
    "apicorev1alpha1Toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key to project."
        },
        "operator": {
          "type": "string",
          "description": "Represents a key's relationship to a set of values."
        },
        "value": {
          "type": "string",
          "description": "An array of string values."
        },
        "effect": {
          "type": "string",
          "description": "Valid effects are NoSchedule, PreferNoSchedule, and NoExecute."
        },
        "tolerationSeconds": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Taint tolerations to static pods,\nso they are not evicted when there are node problems."
    },
    "apiinstancev1alpha1LocalSecretReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the specified secret."
        },
        "namespace": {
          "type": "string",
          "description": "namespace of the specified secret."
        }
      },
      "description": "LocalSecretReference is a reference to a secret within the enclosing namespace."
    },
    "apinetworkingv1alpha1LoadBalancerStatus": {
      "type": "object",
      "properties": {
        "ingress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1LoadBalancerIngress"
          },
          "description": "Ingress is a list containing ingress points for the load-balancer.\nTraffic intended for the service should be sent to these ingress points."
        }
      },
      "title": "LoadBalancerStatus represents the status of a load-balancer"
    },
    "apipolicyv1alpha1GetOverridePolicyJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the OverridePolicy YAML details"
        }
      },
      "description": "OverridePolicy data information in json format."
    },
    "apipolicyv1alpha1Toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key to project."
        },
        "operator": {
          "type": "string",
          "description": "Represents a key's relationship to a set of values."
        },
        "value": {
          "type": "string",
          "description": "An array of string values."
        },
        "effect": {
          "type": "string",
          "description": "Valid effects are NoSchedule, PreferNoSchedule, and NoExecute."
        },
        "tolerationSeconds": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Taint tolerations to static pods,\nso they are not evicted when there are node problems."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesClusterFieldSelector": {
      "type": "object",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesClusterSelectorRequirement"
          }
        }
      },
      "description": "FieldSelector is a field filter."
    },
    "typesClusterSelectorOperator": {
      "type": "string",
      "enum": [
        "In",
        "NotIn",
        "Exists",
        "DoesNotExist",
        "Gt",
        "Lt"
      ],
      "default": "In"
    },
    "typesClusterSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/typesClusterSelectorOperator"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "typesCondition": {
      "type": "object",
      "properties": {
        "lastTransitionTime": {
          "type": "string",
          "title": "Last time the condition transitioned from one status to another.\n+optional"
        },
        "lastUpdateTime": {
          "type": "string",
          "title": "Last time we got an update on a given condition.\n+optional"
        },
        "message": {
          "type": "string",
          "title": "A human readable message indicating details about the transition.\n+optional"
        },
        "reason": {
          "type": "string",
          "title": "The reason for the condition's last transition.\n+optional"
        },
        "status": {
          "type": "string",
          "description": "Status of the condition, one of True, False, Unknown."
        },
        "type": {
          "type": "string",
          "description": "Type of condition."
        }
      },
      "description": "Condition describes the state of a referent at a certain point."
    },
    "typesLabelSelector": {
      "type": "object",
      "properties": {
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "matchLabels is a map of {key,value} pairs. A single {key,value} in the\nmatchLabels map is equivalent to an element of matchExpressions, whose key\nfield is \"key\", the operator is \"In\", and the values array contains only\n\"value\". The requirements are ANDed. +optional"
        },
        "matchExpressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesLabelSelectorRequirement"
          },
          "title": "matchExpressions is a list of label selector requirements. The requirements\nare ANDed. +optional"
        }
      },
      "description": "A label selector is a label query over a set of resources. The result of\nmatchLabels and matchExpressions are ANDed. An empty label selector matches\nall objects. A null label selector matches no objects."
    },
    "typesLabelSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or\nDoesNotExist, the values array must be empty. This array is replaced during\na strategic merge patch. +optional"
        }
      },
      "description": "A label selector requirement is a selector that contains values, a key, and\nan operator that relates the key and values."
    },
    "typesObjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name must be unique within a namespace. Is required when creating\nresources, although some resources may allow a client to request the\ngeneration of an appropriate name automatically. Name is primarily intended\nfor creation idempotence and configuration definition. Cannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names\n+optional"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within each name must be unique. An empty\nnamespace is equivalent to the \"default\" namespace, but \"default\" is the\ncanonical representation. Not all objects are required to be scoped to a\nnamespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/namespaces\n+optional"
        },
        "uid": {
          "type": "string",
          "description": "UID is the unique in time and space value for this object. It is typically\ngenerated by the server on successful creation of a resource and is not\nallowed to change on PUT operations.\n\nPopulated by the system.\nRead-only.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids\n+optional"
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that\ncan be used by clients to determine when objects have changed. May be used\nfor optimistic concurrency, change detection, and the watch operation on a\nresource or set of resources. Clients must treat these values as opaque and\npassed unmodified back to the server. They may only be valid for a\nparticular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "CreationTimestamp is a timestamp representing the server time when this\nobject was created. It is not guaranteed to be set in happens-before order\nacross separate operations. Clients may not set this value. It is\nrepresented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "deletionTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be\ndeleted. This field is set by the server when a graceful deletion is\nrequested by the user, and is not directly settable by a client. The\nresource is expected to be deleted (no longer visible from resource lists,\nand not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items,\ndeletion is blocked. Once the deletionTimestamp is set, this value may not\nbe unset or be set further into the future, although it may be shortened or\nthe resource may be deleted prior to this time. For example, a user may\nrequest that a pod is deleted in 30 seconds. The Kubelet will react by\nsending a graceful termination signal to the containers in the pod. After\nthat 30 seconds, the Kubelet will send a hard termination signal (SIGKILL)\nto the container and after cleanup, remove the pod from the API. In the\npresence of network partitions, this object may still exist after this\ntimestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations is an unstructured key value map stored with a resource that\nmay be set by external tools to store and retrieve arbitrary metadata. They\nare not queryable and should be preserved when modifying objects. More\ninfo: http://kubernetes.io/docs/user-guide/annotations +optional"
        },
        "ownerReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesOwnerReference"
          },
          "title": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is\nmanaged by a controller, then an entry in this list will point to this\ncontroller, with the controller field set to true. There cannot be more\nthan one managing controller. +optional +patchMergeKey=uid\n+patchStrategy=merge"
        },
        "cluster": {
          "type": "string",
          "description": "The name of the cluster which the object belongs to.\nThis is used to distinguish resources with same name and namespace in\ndifferent clusters. This field is not set anywhere right now and apiserver\nis going to ignore it if set in create or update request."
        },
        "workspaceAlias": {
          "type": "string",
          "description": "The name of the workspace which the object belongs to.\nThis is used to distinguish resources with same name and namespace in\ndifferent workspaces. This field is not set anywhere right now and\napiserver is going to ignore it if set in create or update request."
        },
        "finalizers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge"
        }
      },
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes\nall objects users must create."
    },
    "typesOwnerReference": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "title": "UID of the referent.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        },
        "controller": {
          "type": "boolean",
          "title": "If true, this reference points to the managing controller.\n+optional"
        }
      },
      "description": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field."
    },
    "typesPagination": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "Total is the total number of referents."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page is current page."
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "PageSize is the data number shown per page."
        },
        "pages": {
          "type": "integer",
          "format": "int32",
          "description": "Pages is the number of pages."
        }
      },
      "description": "Pagination is for data paging."
    },
    "typesRollingUpdate": {
      "type": "object",
      "properties": {
        "maxSurge": {
          "type": "string",
          "title": "The maximum number of pods that can be scheduled above the desired number\nof pods. Value can be an absolute number (ex: 5) or a percentage of desired\npods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number\nis calculated from percentage by rounding up. Defaults to 25%. Example:\nwhen this is set to 30%, the new ReplicaSet can be scaled up immediately\nwhen the rolling update starts, such that the total number of old and new\npods do not exceed 130% of desired pods. Once old pods have been killed,\nnew ReplicaSet can be scaled up further, ensuring that total number of pods\nrunning at any time during the update is at most 130% of desired pods.\n+optional"
        },
        "maxUnavailable": {
          "type": "string",
          "title": "The maximum number of pods that can be unavailable during the update.\nValue can be an absolute number (ex: 5) or a percentage of desired pods\n(ex: 10%). Absolute number is calculated from percentage by rounding down.\nThis can not be 0 if MaxSurge is 0.\nDefaults to 25%.\nExample: when this is set to 30%, the old ReplicaSet can be scaled down to\n70% of desired pods immediately when the rolling update starts. Once new\npods are ready, old ReplicaSet can be scaled down further, followed by\nscaling up the new ReplicaSet, ensuring that the total number of pods\navailable at all times during the update is at least 70% of desired pods.\n+optional"
        }
      },
      "description": "Spec to control the desired behavior of rolling update."
    },
    "typesSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "field_name",
        "state",
        "workspace",
        "cluster",
        "namespace",
        "created_at"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "SortBy determines the data list order reference.\n\n - SORT_BY_UNSPECIFIED: Unspecified is default, no sorting.\n - field_name: Sort result by name.\n - state: TODO: Sort result by state not supported yet.\n - workspace: TODO: Sort result by workspace not supported yet.\n - cluster: Sort result by cluster name.\n - namespace: Sort result by namespace.\n - created_at: Sort result by creationTimestamp."
    },
    "typesSortDir": {
      "type": "string",
      "enum": [
        "desc",
        "asc"
      ],
      "default": "desc",
      "description": "SortDir determines the data list order.\n\n - desc: Desc stands for descending order.\n - asc: Asc stands for ascending order."
    },
    "typesTaint": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Required. The taint key to be applied to a node."
        },
        "value": {
          "type": "string",
          "description": "The taint value corresponding to the taint key."
        },
        "effect": {
          "$ref": "#/definitions/typesTaintEffect",
          "description": "Valid effects are NoSchedule, PreferNoSchedule, and NoExecute."
        }
      }
    },
    "typesTaintEffect": {
      "type": "string",
      "enum": [
        "TAINT_EFFECT_UNSPECIFIED",
        "NoSchedule",
        "PreferNoSchedule",
        "NoExecute"
      ],
      "default": "TAINT_EFFECT_UNSPECIFIED",
      "description": "Valid effects are NoSchedule, PreferNoSchedule, and NoExecute.\n\n - TAINT_EFFECT_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - NoSchedule: NoSchedule tries to avoid scheduling pods to nodes where they can't\ntolerate taints.\n - PreferNoSchedule: This is not mandatory tries to avoid scheduling pods to nodes.\n - NoExecute: NoExecute is not assign pod  to or evicted pod from the node."
    },
    "typesUpdateStrategy": {
      "type": "object",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/typesRollingUpdate",
          "title": "RollingUpdate is used to communicate parameters when Type is\nRollingUpdateType. +optional"
        },
        "type": {
          "type": "string",
          "title": "Type indicates the type of the UpdateStrategy.\n+optional"
        }
      },
      "description": "UpdateStrategy indicates the strategy that the controller\nwill use to perform updates. It includes any additional parameters necessary\nto perform the update for the indicated strategy."
    },
    "typesWorkloadState": {
      "type": "string",
      "enum": [
        "WORKLOAD_STATE_UNSPECIFIED",
        "WORKLOAD_STATE_RUNNING",
        "WORKLOAD_STATE_DELETING",
        "WORKLOAD_STATE_NOT_READY",
        "WORKLOAD_STATE_STOPPED",
        "WORKLOAD_STATE_WAITING"
      ],
      "default": "WORKLOAD_STATE_UNSPECIFIED",
      "description": "- WORKLOAD_STATE_UNSPECIFIED: Unspecified is only a meaningless placeholder, to avoid zero not return.\n - WORKLOAD_STATE_RUNNING: Running shows the referent is available.\n - WORKLOAD_STATE_DELETING: Deleting is when the referent will be deleted.\n - WORKLOAD_STATE_NOT_READY: NotReady shows the referent is unavailable.\n - WORKLOAD_STATE_STOPPED: Stopped indicates that the referent has 0 ready pods.\n - WORKLOAD_STATE_WAITING: Waiting indicates that the referent is paused.",
      "title": "WorkloadState describes the state of\nworkload(deployments/daemonsets/statefulsets)"
    },
    "v1JSON": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "JSON represents any valid JSON value.\nThese types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "v1alpha1Action": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "BIND",
        "UNBIND"
      ],
      "default": "UNSPECIFIED",
      "title": "- UNSPECIFIED: Unspecified\n - BIND: 绑定\n - UNBIND: 解绑"
    },
    "v1alpha1Affinity": {
      "type": "object",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/v1alpha1NodeAffinity",
          "title": "Describes node affinity scheduling rules for the pod.\n+optional"
        },
        "podAffinity": {
          "$ref": "#/definitions/v1alpha1PodAffinity",
          "title": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the\nsame node, zone, etc. as some other pod(s)). +optional"
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/v1alpha1PodAffinity",
          "title": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod\nin the same node, zone, etc. as some other pod(s)). +optional"
        }
      },
      "description": "Affinity is a group of affinity scheduling rules."
    },
    "v1alpha1AggregationResource": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "popagrationpolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "overridepolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1Artifact": {
      "type": "object",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Digest is artifact digest."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Tag"
          },
          "description": "Tags is a list of tags."
        },
        "imageSize": {
          "type": "string",
          "format": "int64",
          "description": "Size of artifact. Unit: byte. 1024 GenericBinary."
        },
        "pushTime": {
          "type": "string",
          "format": "int64",
          "description": "First push time."
        }
      },
      "title": "Artifact is the concept of harbor artifact"
    },
    "v1alpha1BindInstancesAction": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string",
          "title": "instance name"
        },
        "workspace": {
          "$ref": "#/definitions/v1alpha1WorkspaceInfo",
          "title": "workspace ID"
        },
        "action": {
          "$ref": "#/definitions/v1alpha1Action",
          "title": "action"
        }
      }
    },
    "v1alpha1BindNamespaceInstancesAction": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "instance": {
          "type": "string",
          "title": "instance name"
        },
        "workspace": {
          "$ref": "#/definitions/v1alpha1WorkspaceInfo"
        },
        "action": {
          "$ref": "#/definitions/v1alpha1Action",
          "title": "action"
        }
      }
    },
    "v1alpha1CloudShell": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1CloudShellSpec",
          "description": "CloudShellSpec defines the desired state of CloudShell."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1CloudShellStatus",
          "description": "CloudShellStatus defines the observed state of CloudShell."
        }
      },
      "description": "CloudShell is the Schema for the cloudshells API."
    },
    "v1alpha1CloudShellSpec": {
      "type": "object",
      "properties": {
        "commandAction": {
          "type": "string",
          "description": "command action specified a initialized command to cloudshell server."
        },
        "once": {
          "type": "boolean",
          "title": "accept only one client and exit on disconnection"
        },
        "ttl": {
          "type": "integer",
          "format": "int32",
          "description": "ttl specified a period time that the cloudshell server pod is\nstop. if not to set, default 500s."
        },
        "cleanup": {
          "type": "boolean",
          "description": "cleanup specified whether to delete cloudshell resources when\ncorresponding job status is completed."
        }
      },
      "description": "CloudShellSpec defines the desired state of CloudShell."
    },
    "v1alpha1CloudShellStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "description": "phase specified status of cloudshell server."
        },
        "accessUrl": {
          "type": "string",
          "description": "access url is be set to expose cloudshell server."
        }
      },
      "title": "CloudShellStatus defines the observed state of CloudShell.enum"
    },
    "v1alpha1Cluster": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1ClusterSpec",
          "description": "ClusterSpec describes how the cluster execution will look like and when it\nwill actually run."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1ClusterStatus",
          "description": "ClusterStatus contains the cluster status."
        }
      }
    },
    "v1alpha1ClusterAffinity": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/typesLabelSelector",
          "title": "LabelSelector is a filter to select member clusters by labels.\nIf non-nil and non-empty, only the clusters match this filter will be selected.\n+optional"
        },
        "clusterNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ClusterNames is the list of clusters to be selected.\n+optional"
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ExcludedClusters is the list of clusters to be ignored.\n+optional"
        },
        "fieldSelector": {
          "$ref": "#/definitions/typesClusterFieldSelector",
          "title": "FieldSelector is a filter to select member clusters by fields.\nIf non-nil and non-empty, only the clusters match this filter will be selected.\n+optional"
        }
      }
    },
    "v1alpha1ClusterAffinityTerm": {
      "type": "object",
      "properties": {
        "affinityName": {
          "type": "string"
        },
        "labelSelector": {
          "$ref": "#/definitions/typesLabelSelector",
          "title": "LabelSelector is a filter to select member clusters by labels.\nIf non-nil and non-empty, only the clusters match this filter will be selected.\n+optional"
        },
        "clusterNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ClusterNames is the list of clusters to be selected.\n+optional"
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ExcludedClusters is the list of clusters to be ignored.\n+optional"
        },
        "fieldSelector": {
          "$ref": "#/definitions/typesClusterFieldSelector",
          "title": "FieldSelector is a filter to select member clusters by fields.\nIf non-nil and non-empty, only the clusters match this filter will be selected.\n+optional"
        }
      }
    },
    "v1alpha1ClusterAggregationResource": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clusterpopagrationpolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clusteroverridepolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1ClusterLabels": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string",
          "title": "member cluster name"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
        }
      },
      "description": "ClusterLabels describe labels of member cluster."
    },
    "v1alpha1ClusterLocation": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        }
      },
      "title": "ClusterLocation Cluster locations"
    },
    "v1alpha1ClusterOverridePolicy": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1OverridePolicySpec",
          "description": "Spec represents the desired behavior of OverridePolicy."
        }
      },
      "description": "ClusterOverridePolicy represents the policy that overrides a group of resources to one or more clusters."
    },
    "v1alpha1ClusterPhase": {
      "type": "string",
      "enum": [
        "CLUSTER_PHASE_UNSPECIFIED",
        "UNKNOWN",
        "CREATING",
        "RUNNING",
        "UPDATING",
        "DELETING",
        "FAILED"
      ],
      "default": "CLUSTER_PHASE_UNSPECIFIED",
      "description": " - CLUSTER_PHASE_UNSPECIFIED: The cluster state is unspecified.\n - UNKNOWN: The cluster state is unknown.\n - CREATING: The cluster is being created.\n - RUNNING: The cluster is running.\n - UPDATING: The cluster is updating.\n - DELETING: The cluster is being deleted.\n - FAILED: The cluster operations failed."
    },
    "v1alpha1ClusterPreferences": {
      "type": "object",
      "properties": {
        "staticWeightList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1StaticClusterWeight"
          },
          "title": "StaticWeightList defines the static cluster weight.\n+optional"
        },
        "dynamicWeight": {
          "$ref": "#/definitions/v1alpha1DynamicWeightFactor",
          "title": "DynamicWeight specifies the factor to generates dynamic weight list.\nIf specified, StaticWeightList will be ignored.\n+kubebuilder:validation:Enum=AvailableReplicas\n+optional"
        }
      }
    },
    "v1alpha1ClusterPropagationPolicy": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1PropagationPolicySpec",
          "description": "Spec represents the desired behavior of PropagationPolicy."
        }
      },
      "description": "ClusterPropagationPolicy represents the cluster policy that propagates a group of resources to one or more clusters."
    },
    "v1alpha1ClusterProvider": {
      "type": "string",
      "enum": [
        "GENERIC",
        "DAOCLOUD_KUBESPRAY",
        "DAOCLOUD_CLUSTER_API",
        "DAOCLOUD_DCE4",
        "REDHAT_OPENSHIFT4",
        "SUSE_RANCHER",
        "VMWARE_TANZU",
        "AWS_EKS",
        "ALIYUN_ACK",
        "TENCENT_TKE",
        "HUAWEI_CCE",
        "MICROSOFT_AZURE"
      ],
      "default": "GENERIC",
      "description": " - GENERIC: Generic\nGENERIC indicates other providers\n - DAOCLOUD_KUBESPRAY: DaoCloud\nDAOCLOUD_KUBESPRAY indicates a provider of DaoCloud's KubeSpray Engine\n - DAOCLOUD_CLUSTER_API: DAOCLOUD_CLUSTER_API indicates a provider of DaoCloud's Cluster API Engine\n - DAOCLOUD_DCE4: DAOCLOUD_DCE4 indicates a provider of DaoCloud's DCE4 Engine\n - REDHAT_OPENSHIFT4: OverSea Distribtion\nREDHAT_OPENSHIFT4 indicates a provider of RedHat Openshift4\n - SUSE_RANCHER: SUSE_RANCHER indicates a provider of SUSE Rancher\n - VMWARE_TANZU: VMWARE_TANZU indicates a provider of VMware Tanzu\n - AWS_EKS: Public Cloud\nAWS_EKS indicates a provider of AWS EKS\n - ALIYUN_ACK: ALIYUN_ACK indicates a provider of Aliyun ACK\n - TENCENT_TKE: TENCENT_TKE indicates a provider of Tencent TKE.\n - HUAWEI_CCE: TENCENT_TKE indicates a provider of Huawei CCE.\n - MICROSOFT_AZURE: MICROSOFT_AZURE=11; indicates a provider of Microsoft Azure."
    },
    "v1alpha1ClusterProviderSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name represents the cluster's name"
        },
        "provider": {
          "$ref": "#/definitions/v1alpha1ClusterProvider",
          "title": "provider represents the cluster's provider"
        },
        "applied": {
          "type": "boolean",
          "title": "Applied represents if the resource referencing by ResourceBinding or ClusterResourceBinding\nis successfully applied on the cluster.\n+optional"
        }
      }
    },
    "v1alpha1ClusterResourceSummary": {
      "type": "object",
      "properties": {
        "allocatable": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Allocatable represents the resources of a cluster that are available for scheduling.\nTotal amount of allocatable resources on all nodes.\n+optional"
        },
        "allocated": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Allocated represents the resources of a cluster that have been scheduled.\nTotal amount of required resources of all Pods that have been scheduled to nodes.\n+optional"
        }
      }
    },
    "v1alpha1ClusterResponse": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1alpha1Cluster",
          "title": "the joined member cluster"
        }
      },
      "title": "Joined cluster into karamada control plane,"
    },
    "v1alpha1ClusterSpec": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/v1alpha1ClusterProvider",
          "description": "Provider represents the cloud provider name of the member cluster."
        },
        "apiEndpoint": {
          "type": "string",
          "description": "The API endpoint of the member cluster. This can be a hostname,\nhostname:port, IP or IP:port."
        },
        "region": {
          "type": "string",
          "description": "Region represents the region of the member cluster locate in."
        },
        "zone": {
          "type": "string",
          "description": "Zone represents the zone of the member cluster locate in."
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Roles represents the roles of cluster."
        },
        "managedBy": {
          "type": "string",
          "description": "ManagedBy is used for worker cluster to show\ncluster is controlled by."
        },
        "aliasName": {
          "type": "string",
          "description": "AliasName represents the alias of the cluster."
        },
        "secretRef": {
          "$ref": "#/definitions/apiclusterv1alpha1LocalSecretReference",
          "description": "SecretRef represents the secret contains mandatory credentials to access the member cluster."
        },
        "taints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesTaint"
          },
          "title": "Taints attached to the member cluster.\nTaints on the cluster have the \"effect\" on\nany resource that does not tolerate the Taint.\n+optional"
        }
      }
    },
    "v1alpha1ClusterStatus": {
      "type": "object",
      "properties": {
        "kubernetesVersion": {
          "type": "string",
          "description": "KubernetesVersion represents version of the member cluster."
        },
        "kubeSystemID": {
          "type": "string",
          "description": "KubeSystemId represents the uuid of sub cluster kube-system namespace."
        },
        "serviceCIDR": {
          "type": "string",
          "description": "ServiceCIDR represents the service network CIDR."
        },
        "podCIDR": {
          "type": "string",
          "description": "PodCIDR represents the pod network CIDR."
        },
        "phase": {
          "$ref": "#/definitions/v1alpha1ClusterPhase",
          "description": "Condition represents the status of the member cluster."
        },
        "cpuUsage": {
          "type": "number",
          "format": "double",
          "description": "The cpu usage of the member cluster."
        },
        "memoryUsage": {
          "type": "number",
          "format": "double",
          "description": "The memory usage of the member cluster."
        },
        "proxyMode": {
          "type": "string",
          "description": "ProxyMode represents the kube-proxy mode of the member cluster."
        },
        "resourceSummary": {
          "$ref": "#/definitions/v1alpha1ClusterResourceSummary",
          "description": "ResourceSummary represents the resource of the member cluster."
        }
      }
    },
    "v1alpha1CommandArgsOverrider": {
      "type": "object",
      "properties": {
        "containerName": {
          "type": "string",
          "title": "The name of container\n+required"
        },
        "operator": {
          "$ref": "#/definitions/v1alpha1OverriderOperator",
          "title": "Operator represents the operator which will apply on the command/args.\n+kubebuilder:validation:Enum=add;remove\n+required"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Value to be applied to command/args.\nItems in Value which will be appended after command/args when Operator is 'add'.\nItems in Value which match in command/args will be deleted when Operator is 'remove'.\nIf Value is empty, then the command/args will remain the same.\n+optional"
        }
      }
    },
    "v1alpha1ConfigMap": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "immutable": {
          "type": "boolean",
          "title": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot\nbe updated (only object metadata can be modified).\nIf not set to true, the field can be modified at any time.\nDefaulted to nil.\n+optional"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Data contains the configuration data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nValues with non-UTF-8 byte sequences must use the BinaryData field.\nThe keys stored in Data must not overlap with the keys in\nthe BinaryData field, this is enforced during validation process.\n+optional"
        },
        "binaryData": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "title": "BinaryData contains the binary data.\nEach key must consist of alphanumeric characters, '-', '_' or '.'.\nBinaryData can contain byte sequences that are not in the UTF-8 range.\nThe keys stored in BinaryData must not overlap with the ones in\nthe Data field, this is enforced during validation process.\nUsing this field will require 1.10+ apiserver and\nkubelet.\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1ConfigMapStatus",
          "description": "Status represents the current status of a ConfigMap."
        }
      },
      "description": "ConfigMap holds configuration data for pods to consume."
    },
    "v1alpha1ConfigMapEnvSource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "This must match the Name of a Volume."
        },
        "optional": {
          "type": "boolean"
        }
      },
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment\nvariables with.\nThe contents of the target ConfigMap's Data field will represent the\nkey-value pairs as environment variables."
    },
    "v1alpha1ConfigMapKeySelector": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The ConfigMap to select from."
        },
        "key": {
          "type": "string",
          "description": "The key to select."
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the ConfigMap or its key must be defined\n+optional"
        }
      },
      "description": "ConfigMapKeySelector selects a key from a ConfigMap."
    },
    "v1alpha1ConfigMapStatus": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      }
    },
    "v1alpha1ConfigMapVolumeSource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1KeyToPath"
          },
          "title": "If unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional"
        },
        "defaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0\nand 511. YAML accepts both octal and decimal values, JSON requires decimal\nvalues for mode bits. Defaults to 0644. Directories within the path are not\naffected by this setting. This might be in conflict with other options that\naffect the file mode, like fsGroup, and the result can be other mode bits\nset. +optional"
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the ConfigMap or its keys must be defined\n+optional"
        }
      },
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a\nvolume as files using the keys in the Data field as the file names, unless\nthe items element is populated with specific mappings of keys to paths.\nConfigMap volumes support ownership management and SELinux relabeling."
    },
    "v1alpha1Container": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of Container."
        },
        "image": {
          "type": "string",
          "description": "The used image of Container."
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The container command."
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workingDir": {
          "type": "string"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Ports"
          }
        },
        "envFrom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1EnvFromSource"
          },
          "title": "EnvFromSource represents the source of a set of ConfigMaps"
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1EnvVar"
          },
          "description": "EnvVar represents an environment variable present in a Container."
        },
        "resources": {
          "$ref": "#/definitions/v1alpha1ResourceRequirements",
          "description": "Source represents a source for the value of an EnvVar."
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1VolumeMount"
          },
          "description": "VolumeMount describes a mounting of a Volume within a container."
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1alpha1Probe",
          "description": "Liveness probe is aimed to help in situarions where fluentd\nsilently hangs for no apparent reasons until manual restart.\nThe idea of this probe is that if fluentd is not queueing or\nflushing chunks for 5 minutes, something is not right. If\nyou want to change the fluentd configuration, reducing amount of\nlogs fluentd collects, consider changing the threshold or turning\nliveness probe off completely."
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1alpha1Probe",
          "description": "Readiness updates the cached pod status with the given readiness, and\ntriggers a status update."
        },
        "startupProbe": {
          "$ref": "#/definitions/v1alpha1Probe",
          "description": "Startup updates the cached container status with the given startup, and\ntriggers a status update."
        },
        "lifecycle": {
          "$ref": "#/definitions/v1alpha1Lifecycle",
          "description": "The life cycle of a Container."
        },
        "imagePullPolicy": {
          "type": "string",
          "description": "Pull image policy."
        },
        "securityContext": {
          "$ref": "#/definitions/v1alpha1SecurityContext",
          "description": "SecurityContext holds security attributes."
        }
      }
    },
    "v1alpha1CreateClusterCustomResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data field is the CustomResource YAML details."
        }
      },
      "title": "CreateClusterCustomResourceResponse represents response of creating one\nCustomResource of cluster scope"
    },
    "v1alpha1CreateClusterOverridePolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the OverridePolicy YAML details"
        }
      }
    },
    "v1alpha1CreateClusterPropagationPolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the PropagationPolicy YAML details"
        }
      }
    },
    "v1alpha1CreateConfigMapResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the ConfigMap YAML details"
        }
      }
    },
    "v1alpha1CreateCronJobResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the CronJob YAML details"
        }
      }
    },
    "v1alpha1CreateCustomResourceDefinitionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the customResourceDefinition YAML details."
        }
      },
      "title": "CreateCustomResourceDefinitionResponse represents response of creating\na createCustomResourceDefinition"
    },
    "v1alpha1CreateCustomResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data field is the CustomResource YAML details."
        }
      },
      "title": "CreateCustomResourceResponse represents response of creating one\nCustomResource of namespaced scope"
    },
    "v1alpha1CreateDeploymentResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Deployment YAML details"
        }
      }
    },
    "v1alpha1CreateFederatedHPAResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the hpa YAML details"
        }
      }
    },
    "v1alpha1CreateIngressResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the ingress YAML details."
        }
      },
      "title": "CreateIngressResponse the response of create cluster ingresses"
    },
    "v1alpha1CreateInstanceKubeConfigResponse": {
      "type": "object",
      "properties": {
        "kubeConfigString": {
          "type": "string",
          "title": "kube config string"
        },
        "instance": {
          "type": "string",
          "description": "Instance represents which instance belongs to."
        }
      },
      "description": "CreateInstanceKubeConfigResponse returns a kubeconfig of Karmada instance."
    },
    "v1alpha1CreateInstanceRequest": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string",
          "description": "cluster specified the instance cluster name."
        },
        "data": {
          "$ref": "#/definitions/v1alpha1Instance",
          "description": "data defines the data of instance."
        }
      },
      "description": "CreateInstanceRequest the response of create instance."
    },
    "v1alpha1CreateJobResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Job YAML details"
        }
      }
    },
    "v1alpha1CreateNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/v1alpha1Namespace"
        }
      },
      "description": "Create Namespace  information."
    },
    "v1alpha1CreateOverridePolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the OverridePolicy YAML details"
        }
      }
    },
    "v1alpha1CreatePropagationPolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the PropagationPolicy YAML details"
        }
      }
    },
    "v1alpha1CreateSecretResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Secret YAML details"
        }
      },
      "description": "It returns the created Secret data information."
    },
    "v1alpha1CreateServiceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "Data is the Service YAML details"
        }
      },
      "description": "It returns the created Service data information."
    },
    "v1alpha1CreateWorkloadServiceRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": " - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets."
    },
    "v1alpha1CronJob": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optiona"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1CronJobSpec",
          "description": "CronJobSpec describes how the job execution will look like and when it will actually run."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1CronJobStatus",
          "description": "CronJobStatus represents the current state of a cron job."
        },
        "availed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of available cronjob."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The number of totally cronjob."
        },
        "executionTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Information when was the time the cronjob was successfully executed."
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Images the cronjob use."
        }
      },
      "description": "CronJob represents the configuration of a single cron job."
    },
    "v1alpha1CronJobSpec": {
      "type": "object",
      "properties": {
        "schedule": {
          "type": "string",
          "description": "The schedule in Cron format."
        },
        "paused": {
          "type": "boolean",
          "description": "Indicates that the cronjob is paused."
        }
      },
      "description": "Specification of the desired behavior of a cron job, including the schedule."
    },
    "v1alpha1CronJobStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "$ref": "#/definitions/CronJobStatusCronJobState",
          "description": "State of a cron job."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CronJobStatusCronJobCondition"
          },
          "description": "Current condition of cronjob."
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      },
      "description": "Current status of a cron job."
    },
    "v1alpha1CrossVersionObjectReference": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "title": "Kind of the referent; More info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\""
        },
        "name": {
          "type": "string",
          "title": "Name of the referent; More info:\nhttp://kubernetes.io/docs/user-guide/identifiers#names"
        },
        "apiVersion": {
          "type": "string",
          "title": "API version of the referent"
        }
      },
      "description": "CrossVersionObjectReference contains enough information to let you identify\nthe referred resource."
    },
    "v1alpha1CustomResource": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind represents the kind of CustomResource."
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion represents the apiVersion of CustomResource."
        },
        "name": {
          "type": "string",
          "description": "Name represents the name of CustomResource."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace represents which namespace the CustomResource belongs to."
        },
        "creationTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "CreationTimestamp represents the creationTime of the CustomResource."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels\n+optional"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        },
        "propagationpolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "overridepolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CustomResource represents the CustomResource message"
    },
    "v1alpha1CustomResourceDefinition": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "title": "Metadata is that all persisted resources must have, which includes all\nobjects"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1CustomResourceDefinitionSpec",
          "description": "Spec is the desired behavior of the CustomResource."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1CustomResourceDefinitionStatus",
          "description": "status is the status information of the CustomResource."
        }
      },
      "title": "CustomResourceDefinition message of CustomResource definition"
    },
    "v1alpha1CustomResourceDefinitionNames": {
      "type": "object",
      "properties": {
        "plural": {
          "type": "string",
          "description": "Plural is the plural name of the resource to serve.  It must match the name\nof the CustomResourceDefinition-registration too: plural.group and it must\nbe all lowercase."
        },
        "singular": {
          "type": "string",
          "title": "Singular is the singular name of the resource.  It must be all lowercase\nDefaults to lowercased <kind>"
        },
        "shortNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ShortNames are short names for the resource.  It must be all lowercase."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the serialized kind of the resource.  It is normally CamelCase and\nsingular."
        },
        "listKind": {
          "type": "string",
          "description": "ListKind is the serialized kind of the list for this resource.  Defaults to\n<kind>List."
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Categories is a list of grouped resources custom resources belong to (e.g.\n'all') +optional"
        }
      },
      "title": "CustomResourceDefinitionNames message of CustomResource definition names"
    },
    "v1alpha1CustomResourceDefinitionSpec": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "title": "Group is the group this resource belongs in"
        },
        "names": {
          "$ref": "#/definitions/v1alpha1CustomResourceDefinitionNames",
          "title": "Names are the names used to describe this custom resource"
        },
        "scope": {
          "$ref": "#/definitions/CustomResourceDefinitionSpecResourceScope",
          "title": "Scope indicates whether this resource is cluster or namespace scoped.\nDefault is namespaced"
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CustomResourceDefinitionVersion"
          },
          "description": "Versions is the list of all supported versions for this resource.\nIf Version field is provided, this field is optional.\nValidation: All versions must use the same validation schema for now. i.e.,\ntop level Validation field is applied to all of these versions. Order: The\nversion name will be used to compute the order. If the version string is\n\"kube-like\", it will sort above non \"kube-like\" version strings, which are\nordered lexicographically. \"Kube-like\" versions start with a \"v\", then are\nfollowed by a number (the major version), then optionally the string\n\"alpha\" or \"beta\" and another number (the minor version). These are sorted\nfirst by GA > beta > alpha (where GA is a version with no suffix such as\nbeta or alpha), and then by comparing major version, then minor version. An\nexample sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1,\nv12alpha1, v11alpha2, foo1, foo10."
        }
      },
      "title": "CustomResourceDefinitionSpec message of CustomResource definition spec"
    },
    "v1alpha1CustomResourceDefinitionStatus": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesCondition"
          },
          "description": "Current condition of cluster."
        }
      },
      "title": "CustomResourceDefinitionStatus represents custom resource definition status"
    },
    "v1alpha1CustomResourceDefinitionVersion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the version name, e.g. “v1”, “v2beta1”, etc."
        },
        "served": {
          "type": "boolean",
          "title": "Served is a flag enabling/disabling this version from being served via REST\nAPIs"
        },
        "storage": {
          "type": "boolean",
          "description": "Storage flags the version as storage version. There must be exactly one\nflagged as storage version."
        },
        "deprecated": {
          "type": "boolean",
          "description": "deprecated indicates this version of the custom resource API is deprecated.\nWhen set to true, API requests to this version receive a warning header in\nthe server response. Defaults to false."
        }
      },
      "title": "CustomResourceDefinitionVersion message of CustomResource definition version"
    },
    "v1alpha1Deployment": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Metadata is that all persisted resources must have, which includes all objects\nusers must create."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1DeploymentSpec",
          "title": "Specification of the desired behavior of the Deployment.\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1DeploymentStatus",
          "title": "Most recently observed status of the Deployment.\n+optional"
        },
        "revision": {
          "type": "string",
          "format": "int64",
          "title": "The revision to rollback to. If set to 0, rollback to the last revision.\n+optional"
        }
      },
      "description": "Deployment provides declarative updates for Pods and ReplicaSets."
    },
    "v1alpha1DeploymentSpec": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1alpha1PodTemplateSpec",
          "title": "Template describes the data a pod should have when created from a template"
        },
        "strategy": {
          "$ref": "#/definitions/typesUpdateStrategy",
          "description": "Strategy indicates the strategy that the controller\nwill use to perform updates. It includes any additional parameters necessary\nto perform the update for the indicated strategy."
        },
        "paused": {
          "type": "boolean",
          "description": "Indicates that the deployment is paused."
        }
      },
      "description": "DeploymentSpec specifies the state of a Deployment."
    },
    "v1alpha1DeploymentStatus": {
      "type": "object",
      "properties": {
        "availableReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.\n+optional"
        },
        "readyReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of ready pods targeted by this deployment.\n+optional"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).\n+optional"
        },
        "state": {
          "$ref": "#/definitions/typesWorkloadState",
          "title": "state describes the state of deployments"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesCondition"
          },
          "description": "Current service state of deployments."
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      },
      "description": "DeploymentStatus holds information about the observed status of a deployment."
    },
    "v1alpha1DeschedulerTimeout": {
      "type": "object",
      "properties": {
        "deschedulingInterval": {
          "type": "string",
          "format": "int64",
          "description": "deschedulingInterval Time interval between two consecutive descheduler executions. Setting this value instructs the descheduler to run in a continuous loop at the interval specified."
        },
        "unschedulableThreshold": {
          "type": "string",
          "format": "int64",
          "description": "unschedulableThresholdThe period of pod unschedulable condition. This value is considered as a classification standard of unschedulable replicas."
        }
      }
    },
    "v1alpha1DetectInsightResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "The kangaroo_enable indicates whether the kangaroo is installed"
        }
      }
    },
    "v1alpha1DetectKangarooResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "The kangaroo_enable indicates whether the kangaroo is installed"
        }
      }
    },
    "v1alpha1DownwardAPIVolumeFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Required: Path is  the relative path name of the file to be created. Must\nnot be absolute or contain the '..' path. Must be utf-8 encoded. The first\nitem of the relative path must not start with '..'"
        },
        "fieldRef": {
          "$ref": "#/definitions/v1alpha1ObjectFieldSelector",
          "title": "Required: Selects a field of the pod: only annotations, labels, name and\nnamespace are supported. +optional"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1alpha1ResourceFieldSelector",
          "title": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently\nsupported. +optional"
        },
        "mode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits used to set permissions on this file, must be an octal\nvalue between 0000 and 0777 or a decimal value between 0 and 511. YAML\naccepts both octal and decimal values, JSON requires decimal values for\nmode bits. If not specified, the volume defaultMode will be used. This\nmight be in conflict with other options that affect the file mode, like\nfsGroup, and the result can be other mode bits set. +optional"
        }
      },
      "description": "DownwardAPIVolumeFile represents information to create the file containing\nthe pod field."
    },
    "v1alpha1DownwardAPIVolumeSource": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1DownwardAPIVolumeFile"
          },
          "title": "Items is a list of downward API volume file\n+optional"
        },
        "DefaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0\nand 511. YAML accepts both octal and decimal values, JSON requires decimal\nvalues for mode bits. Defaults to 0644. Directories within the path are not\naffected by this setting. This might be in conflict with other options that\naffect the file mode, like fsGroup, and the result can be other mode bits\nset. +optional"
        }
      },
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info.\nDownward API volumes support ownership management and SELinux relabeling."
    },
    "v1alpha1DynamicWeightFactor": {
      "type": "string",
      "enum": [
        "DYNAMIC_WEIGHT_FACTOR_UNSPECIFIED",
        "AvailableReplicas"
      ],
      "default": "DYNAMIC_WEIGHT_FACTOR_UNSPECIFIED",
      "description": "DynamicWeightByAvailableReplicas represents the cluster weight list should be generated according to\navailable resource (available replicas)."
    },
    "v1alpha1EmptyDirVolumeSource": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string",
          "title": "What type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "Total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value\nbetween the SizeLimit specified here and the sum of memory limits of all\ncontainers in a pod. The default is nil which means that the limit is\nundefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir\n+optional"
        }
      },
      "description": "Represents an empty directory for a pod.\nEmpty directory volumes support ownership management and SELinux relabeling."
    },
    "v1alpha1EnvFromSource": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string",
          "title": "An optional identifier to prepend to each key in the ConfigMap.\n+optional"
        },
        "configMapRef": {
          "$ref": "#/definitions/v1alpha1ConfigMapEnvSource",
          "title": "The ConfigMap to select from.\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1alpha1SecretEnvSource",
          "title": "The Secret to select from.\n+optional"
        }
      },
      "title": "EnvFromSource represents the source of a set of ConfigMaps"
    },
    "v1alpha1EnvVar": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of EnvVar."
        },
        "value": {
          "type": "string",
          "description": "The value of EnvVar."
        },
        "valueFrom": {
          "$ref": "#/definitions/v1alpha1EnvVarSource",
          "title": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key\nexists in multiple sources, the value associated with the last source will\ntake precedence. Values defined by an Env with a duplicate key will take\nprecedence. Cannot be updated.\","
        }
      },
      "description": "Environment variable information."
    },
    "v1alpha1EnvVarSource": {
      "type": "object",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/v1alpha1ObjectFieldSelector",
          "title": "Selects a field of the pod: supports metadata.name, metadata.namespace,\n`metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName,\nspec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1alpha1ResourceFieldSelector",
          "title": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,\nrequests.memory and requests.ephemeral-storage) are currently supported.\n+optional"
        },
        "ConfigMapKeyRef": {
          "$ref": "#/definitions/v1alpha1ConfigMapKeySelector",
          "title": "Selects a key of a ConfigMap.\n+optional"
        },
        "secretKeyRef": {
          "$ref": "#/definitions/v1alpha1SecretKeySelector",
          "title": "Selects a key of a secret in the pod's namespace\n+optional"
        }
      },
      "description": "EnvVarSource represents a source for the value of an EnvVar.\nOnly one of its fields may be set."
    },
    "v1alpha1Event": {
      "type": "object",
      "properties": {
        "involvedObject": {
          "$ref": "#/definitions/v1alpha1ObjectReference",
          "description": "The object that this event is about."
        },
        "reason": {
          "type": "string",
          "description": "reason is why the action was taken. It is human-readable.\nThis field cannot be empty for new Events and it can have at most 128\ncharacters."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the status of this operation."
        },
        "source": {
          "$ref": "#/definitions/v1alpha1EventSource",
          "description": "The component reporting this event. Should be a short machine\nunderstandable string."
        },
        "lastTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "The time at which the most recent occurrence of this event was recorded."
        },
        "type": {
          "$ref": "#/definitions/v1alpha1EventType",
          "description": "Type of this event (Normal, Warning), new types could be added in the\nfuture."
        }
      },
      "description": "Event is a report of an event somewhere in the instance.  Events\nhave a limited retention time and triggers and messages may evolve\nwith time.  Event consumers should not rely on the timing of an event\nwith a given Reason reflecting a consistent underlying trigger, or the\ncontinued existence of events with that Reason.  Events should be\ntreated as informative, best-effort, supplemental data."
    },
    "v1alpha1EventSource": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "title": "Component from which the event is generated.\n+optional"
        },
        "host": {
          "type": "string",
          "title": "Node name on which the event is generated.\n+optional"
        }
      },
      "description": "EventSource contains information for an event."
    },
    "v1alpha1EventType": {
      "type": "string",
      "enum": [
        "EVENT_TYPE_UNSPECIFIED",
        "Normal",
        "Warning"
      ],
      "default": "EVENT_TYPE_UNSPECIFIED",
      "description": "Type of event (Normal, Warning), new types could be added in the\nfuture.\n\n - EVENT_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Normal: Normal is a normal event type.\n - Warning: Warning is a warning event type."
    },
    "v1alpha1ExecAction": {
      "type": "object",
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "ExecAction describes a \"run in container\" action."
    },
    "v1alpha1ExternalMetricSource": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v1alpha1MetricIdentifier",
          "title": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/v1alpha1MetricTarget",
          "title": "target specifies the target value for the given metric"
        }
      },
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with\nany Kubernetes object (for example length of queue in cloud\nmessaging service, or QPS from loadbalancer running outside of cluster)."
    },
    "v1alpha1ExternalMetricStatus": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v1alpha1MetricIdentifier",
          "title": "metric identifies the target metric by name and selector"
        },
        "current": {
          "$ref": "#/definitions/v1alpha1MetricValueStatus",
          "title": "current contains the current value for the given metric"
        }
      },
      "description": "ExternalMetricStatus indicates the current value of a global metric\nnot associated with any Kubernetes object."
    },
    "v1alpha1FailoverTimeout": {
      "type": "object",
      "properties": {
        "failoverEvictionTimeout": {
          "type": "string",
          "format": "int64",
          "description": "failoverEvictionTimeout Specifies the grace period for deleting scheduling result on failed clusters."
        },
        "clusterMonitorPeriod": {
          "type": "string",
          "format": "int64",
          "description": "clusterMonitorPeriod Specifies how often karmada-controller-manager monitors cluster health status."
        },
        "clusterStartupGracePeriod": {
          "type": "string",
          "format": "int64",
          "description": "clusterStartupGracePeriod Specifies the grace period of allowing a cluster to be unresponsive during startup before marking it unhealthy."
        },
        "clusterMonitorGracePeriod": {
          "type": "string",
          "format": "int64",
          "description": "clusterMonitorGracePeriod Specifies the grace period of allowing a running cluster to be unresponsive before marking it unhealthy."
        },
        "gracefulEvictionTimeout": {
          "type": "string",
          "format": "int64",
          "description": "gracefulEvictionTimeout Specifies the timeout period waiting for the graceful-eviction-controller performs the final removal since the workload(resource) has been moved to the graceful eviction tasks."
        },
        "clusterSuccessThreshold": {
          "type": "string",
          "format": "int64",
          "description": "clusterSuccessThreshold the duration of successes for the cluster to be considered healthy after recovery."
        },
        "clusterFailureThreshold": {
          "type": "string",
          "format": "int64",
          "description": "clusterFailureThreshold The duration of failure for the cluster to be considered unhealthy."
        }
      },
      "title": "FailoverTimeout Failover timeout"
    },
    "v1alpha1FederatedHPA": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1FederatedHPASpec",
          "description": "behaviour of autoscaler. More info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1FederatedHPAStatus",
          "description": "current information about the autoscaler."
        }
      },
      "description": "configuration of a horizontal pod autoscaler."
    },
    "v1alpha1FederatedHPASpec": {
      "type": "object",
      "properties": {
        "scaleTargetRef": {
          "$ref": "#/definitions/v1alpha1CrossVersionObjectReference",
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the\ncurrent resource consumption and will set the desired number of pods by\nusing its Scale subresource."
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "minReplicas is the lower limit for the number of replicas to which the\nautoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed\nto be 0 if the alpha feature gate HPAScaleToZero is enabled and at least\none Object or External metric is configured.  Scaling is active as long as\nat least one metric value is available. +optional"
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "upper limit for the number of pods that can be set by the autoscaler;\ncannot be smaller than MinReplicas."
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1MetricSpec"
          },
          "title": "metrics contains the specifications for which to use to calculate the\ndesired replica count (the maximum replica count across all metrics will\nbe used).  The desired replica count is calculated multiplying the\nratio between the target value and the current value by the current\nnumber of pods.  Ergo, metrics used must decrease as the pod count is\nincreased, and vice-versa.  See the individual metric source types for\nmore information about how each type of metric must respond.\nIf not set, the default metric will be set to 80% average CPU utilization.\n+listType=atomic\n+optional"
        },
        "behavior": {
          "$ref": "#/definitions/v1alpha1HorizontalPodAutoscalerBehavior",
          "title": "behavior configures the scaling behavior of the target\nin both Up and Down directions (scaleUp and scaleDown fields respectively).\nIf not set, the default HPAScalingRules for scale up and scale down are used.\n+optional\ntodo: add HorizontalPodAutoscalerBehavior"
        }
      },
      "description": "specification of a horizontal pod autoscaler."
    },
    "v1alpha1FederatedHPAStatus": {
      "type": "object",
      "properties": {
        "lastScaleTime": {
          "type": "string",
          "format": "int64",
          "title": "last time the HorizontalPodAutoscaler scaled the number of pods;\nused by the autoscaler to control how often the number of pods is changed.\n+optional"
        },
        "currentReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "current number of replicas of pods managed by this autoscaler."
        },
        "desiredReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "desired number of replicas of pods managed by this autoscaler."
        },
        "currentMetrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1MetricStatus"
          },
          "title": "currentMetrics is the last read state of the metrics used by this autoscaler.\n+listType=atomic\n+optional"
        },
        "phase": {
          "$ref": "#/definitions/v1alpha1FederatedHPAStatusPhase",
          "description": "The phase of hpa."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesCondition"
          },
          "description": "Current service state of HPA."
        }
      }
    },
    "v1alpha1FederatedHPAStatusPhase": {
      "type": "string",
      "enum": [
        "PHASE_UNSPECIFIED",
        "Ready",
        "NotReady"
      ],
      "default": "PHASE_UNSPECIFIED",
      "description": "- Ready: The Ready phase which means the hpa is normal.\n - NotReady: The NotReady phase which means some error occur.",
      "title": "The list of HPA phase;"
    },
    "v1alpha1GVR": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "description": "Group represents the resource group of CustomResources."
        },
        "version": {
          "type": "string",
          "description": "Version represents the resource version of CustomResources."
        },
        "resource": {
          "type": "string",
          "description": "Resource represents the resource name of CustomResources, which is plural.\nYou can find it in plural field of related CRD definition."
        }
      }
    },
    "v1alpha1GetClusterCustomResourceJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data field is the CustomResource YAML details"
        }
      },
      "title": "GetClusterCustomResourceJSONResponse represents response of get one\nCustomResource'json of cluster scope"
    },
    "v1alpha1GetClusterOverridePolicyJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the OverridePolicy YAML details"
        }
      },
      "description": "ClusterOverridePolicy data information in json format."
    },
    "v1alpha1GetClusterOverridePolicyResponse": {
      "type": "object",
      "properties": {
        "clusterOverridePolicy": {
          "$ref": "#/definitions/v1alpha1ClusterOverridePolicy",
          "description": "The new state of the OverridePolicy."
        }
      },
      "title": "Get ClusterOverridePolicy represents the response of get one override policy"
    },
    "v1alpha1GetClusterPropagationPolicyJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the ClusterPropagationPolicy YAML details"
        }
      },
      "description": "ClusterPropagationPolicy data information in json format."
    },
    "v1alpha1GetClusterPropagationPolicyResponse": {
      "type": "object",
      "properties": {
        "clusterPropagationPolicy": {
          "$ref": "#/definitions/v1alpha1ClusterPropagationPolicy",
          "description": "The new state of the propagationPolicy."
        }
      },
      "title": "Get PropagationPolicy represents the response of get one propagation policy"
    },
    "v1alpha1GetConfigMapJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the ConfigMap YAML details"
        }
      },
      "description": "ConfigMap data information in json format."
    },
    "v1alpha1GetCronJobJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the CronJob YAML details"
        }
      },
      "description": "CronJob data information in json format."
    },
    "v1alpha1GetCustomResourceDefinitionJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data field is the CustomResourceDefinition YAML details"
        }
      },
      "title": "GetCustomResourceDefinitionJSONResponse represents response of get one\nCustomResourceDefinition'json"
    },
    "v1alpha1GetCustomResourceJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data field is the CustomResource YAML details"
        }
      },
      "title": "GetCustomResourceJSONResponse represents response of get one\nCustomResource'json of namespaced scope"
    },
    "v1alpha1GetDeploymentJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Deployment YAML details"
        }
      },
      "description": "Deployment data information in json format."
    },
    "v1alpha1GetFederatedHPAJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data field is the hpa YAML details."
        }
      },
      "description": "FederatedHPAJSON responses the messages of hap YAML details."
    },
    "v1alpha1GetFederatedHPAResponse": {
      "type": "object",
      "properties": {
        "fhpa": {
          "$ref": "#/definitions/v1alpha1FederatedHPA"
        }
      }
    },
    "v1alpha1GetIngressJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the ingress YAML details."
        }
      },
      "title": "GetIngressJSONResponse the response of get cluster ingresses json"
    },
    "v1alpha1GetInstanceDeschedulerResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Descheduler enabled"
        },
        "timeout": {
          "$ref": "#/definitions/v1alpha1DeschedulerTimeout"
        }
      }
    },
    "v1alpha1GetInstanceFailoverResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Failover enabled"
        },
        "timeout": {
          "$ref": "#/definitions/v1alpha1FailoverTimeout",
          "title": "Failover timeout"
        }
      }
    },
    "v1alpha1GetInstanceJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the ingress YAML details."
        }
      },
      "description": "GetInstanceJSONResponse the response of get instance json."
    },
    "v1alpha1GetInstanceMetricsAdapterResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "MetricsAdapter enabled"
        }
      }
    },
    "v1alpha1GetJobJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Deployment YAML details"
        }
      },
      "description": "Job data information in json format."
    },
    "v1alpha1GetNamespaceJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Namespace YAML details"
        }
      }
    },
    "v1alpha1GetNamespaceResponse": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/v1alpha1Namespace",
          "title": "The data is the Namespace YAML details"
        }
      }
    },
    "v1alpha1GetOverridePolicyResponse": {
      "type": "object",
      "properties": {
        "overridePolicy": {
          "$ref": "#/definitions/v1alpha1OverridePolicy",
          "description": "The new state of the OverridePolicy."
        }
      },
      "title": "Get OverridePolicy represents the response of get one override policy"
    },
    "v1alpha1GetPropagationPolicyJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the PropagationPolicy YAML details"
        }
      },
      "description": "PropagationPolicy data information in json format."
    },
    "v1alpha1GetPropagationPolicyResponse": {
      "type": "object",
      "properties": {
        "propagationPolicy": {
          "$ref": "#/definitions/v1alpha1PropagationPolicy",
          "description": "The new state of the propagationPolicy."
        }
      },
      "title": "Get PropagationPolicy represents the response of get one propagation policy"
    },
    "v1alpha1GetSecretJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data field is the Secret YAML details"
        }
      },
      "description": "It returns Secret data information in json format."
    },
    "v1alpha1GetServiceJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the Service YAML details."
        }
      },
      "description": "It returns Service data information in json format."
    },
    "v1alpha1HPAScalingRules": {
      "type": "object",
      "properties": {
        "stabilizationWindowSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "StabilizationWindowSeconds is the number of seconds for which past recommendations should be\nconsidered while scaling up or scaling down.\nStabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).\nIf not set, use the default values:\n- For scale up: 0 (i.e. no stabilization is done).\n- For scale down: 300 (i.e. the stabilization window is 300 seconds long).\n+optional"
        }
      }
    },
    "v1alpha1HTTPGetAction": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Path to access on the HTTP server.\n+optional"
        },
        "port": {
          "type": "string",
          "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME."
        },
        "host": {
          "type": "string",
          "title": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional"
        },
        "scheme": {
          "type": "string",
          "title": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional"
        }
      },
      "description": "HTTPGetAction describes an action based on HTTP Get requests."
    },
    "v1alpha1HTTPIngressPath": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path is matched against the path of an incoming request."
        },
        "pathType": {
          "type": "string",
          "description": "PathType determines the interpretation of the Path matching."
        },
        "backend": {
          "$ref": "#/definitions/v1alpha1IngressBackend",
          "description": "Backend defines the referenced service endpoint to which the traffic will\nbe forwarded to."
        }
      },
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the\npath are forwarded to the backend."
    },
    "v1alpha1HTTPIngressRuleValue": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1HTTPIngressPath"
          },
          "description": "A collection of paths that map requests to backends."
        }
      },
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends.\nIn the example: http://<host>/<path>?<searchpart> -> backend where\nwhere parts of the url correspond to RFC 3986, this resource will be used\nto match against everything after the last '/' and before the first '?'\nor '#'."
    },
    "v1alpha1Handler": {
      "type": "object",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1alpha1ExecAction",
          "title": "Exec specifies the action to take.\n+optional"
        },
        "httpGet": {
          "$ref": "#/definitions/v1alpha1HTTPGetAction",
          "title": "HTTPGet specifies the http request to perform.\n+optional"
        },
        "TCPSocket": {
          "$ref": "#/definitions/v1alpha1TCPSocketAction",
          "title": "TCPSocket specifies an action involving a TCP port.\n+optional"
        }
      }
    },
    "v1alpha1HorizontalPodAutoscalerBehavior": {
      "type": "object",
      "properties": {
        "scaleUp": {
          "$ref": "#/definitions/v1alpha1HPAScalingRules",
          "description": "No stabilization is used.\n+optional",
          "title": "scaleUp is scaling policy for scaling Up.\nIf not set, the default value is the higher of:\n  - increase no more than 4 pods per 60 seconds\n  - double the number of pods per 60 seconds"
        },
        "scaleDown": {
          "$ref": "#/definitions/v1alpha1HPAScalingRules",
          "title": "scaleDown is scaling policy for scaling Down.\nIf not set, the default value is to allow to scale down to minReplicas pods, with a\n300 second stabilization window (i.e., the highest recommendation for\nthe last 300sec is used).\n+optional"
        }
      }
    },
    "v1alpha1HostCluster": {
      "type": "object",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/apiinstancev1alpha1LocalSecretReference",
          "description": "SecretRef represents the secret contains mandatory credentials to\naccess the cluster."
        }
      }
    },
    "v1alpha1HostPathVolumeSource": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path."
        },
        "type": {
          "type": "string",
          "title": "Type for HostPath Volume\nDefaults to \"\"\n+optional"
        }
      },
      "description": "HostPathVolumeSource Represents a host path mapped into a pod.\nHost path volumes do not support ownership management or SELinux relabeling."
    },
    "v1alpha1ImageComponent": {
      "type": "string",
      "enum": [
        "Registry",
        "Repository",
        "Tag"
      ],
      "default": "Registry",
      "description": "ImageComponent indicates the components for image.\n\n - Registry: Registry is the registry component of an image with format '[registry/]repository[:tag]'.\n - Repository: Repository is the repository component of an image with format '[registry/]repository[:tag]'.\n - Tag: Tag is the tag component of an image with format '[registry/]repository[:tag]'."
    },
    "v1alpha1ImageOverrider": {
      "type": "object",
      "properties": {
        "predicate": {
          "$ref": "#/definitions/v1alpha1ImagePredicate",
          "title": "Predicate filters images before applying the rule.\nDefaults to nil, in that case, the system will automatically detect image fields if the resource type is\n+optional"
        },
        "component": {
          "$ref": "#/definitions/v1alpha1ImageComponent",
          "description": "+kubebuilder:validation:Enum=Registry;Repository;Tag\n+required",
          "title": "Component is part of image name.\nBasically we presume an image can be made of '[registry/]repository[:tag]'.\nThe registry could be:\n- k8s.gcr.io\n- fictional.registry.example:10443\nThe repository could be:\n- kube-apiserver\n- fictional/nginx\nThe tag cloud be:\n- latest\n- v1.19.1\n- @sha256:dbcc1c35ac38df41fd2f5e4130b32ffdb93ebae8b3dbe638c23575912276fc9c"
        },
        "operator": {
          "$ref": "#/definitions/v1alpha1OverriderOperator",
          "title": "Operator represents the operator which will apply on the image.\n+kubebuilder:validation:Enum=add;remove;replace\n+required"
        },
        "value": {
          "type": "string",
          "title": "Value to be applied to image.\nMust not be empty when operator is 'add' or 'replace'.\nDefaults to empty and ignored when operator is 'remove'.\n+optional"
        }
      }
    },
    "v1alpha1ImagePredicate": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Path indicates the path of target field\n+required"
        }
      },
      "description": "ImagePredicate describes images filter."
    },
    "v1alpha1Ingress": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1IngressSpec",
          "description": "Spec is the desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1IngressStatus",
          "description": "Status is the current state of the Ingress."
        }
      },
      "description": "Ingress is a collection of rules that allow inbound connections to reach the\nendpoints defined by a backend. An Ingress can be configured to give services\nexternally-reachable urls, load balance traffic, terminate SSL, offer name\nbased virtual hosting etc."
    },
    "v1alpha1IngressBackend": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/v1alpha1IngressServiceBackend",
          "description": "Service references a Service as a Backend.\nThis is a mutually exclusive setting with \"Resource\"."
        },
        "resource": {
          "$ref": "#/definitions/v1alpha1TypedLocalObjectReference",
          "description": "Resource is an ObjectRef to another Kubernetes resource in the namespace\nof the Ingress object. If resource is specified, a service.Name and\nservice.Port must not be specified.\nThis is a mutually exclusive setting with \"Service\"."
        }
      },
      "description": "IngressBackend describes all endpoints for a given service and port."
    },
    "v1alpha1IngressClassSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name is the name of ingress class"
        },
        "isDefaultClass": {
          "type": "boolean",
          "description": "IsDefaultClass is used to indicate that an IngressClass should be considered default."
        }
      }
    },
    "v1alpha1IngressRule": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "Host is the fully qualified domain name of a network host, as defined by\nRFC 3986."
        },
        "http": {
          "$ref": "#/definitions/v1alpha1HTTPIngressRuleValue",
          "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends."
        }
      },
      "description": "IngressRule represents the rules mapping the paths under a specified host to\nthe related backend services. Incoming requests are first evaluated for a host\nmatch, then routed to the backend associated with the matching IngressRuleValue."
    },
    "v1alpha1IngressServiceBackend": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name is the referenced service. The service must exist in"
        },
        "port": {
          "$ref": "#/definitions/v1alpha1IngressServiceBackendPort",
          "title": "Port of the referenced service. A port name or port number"
        }
      },
      "description": "IngressServiceBackend references a Kubernetes Service as a Backend."
    },
    "v1alpha1IngressServiceBackendPort": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the name of the port on the Service.\nThis is a mutually exclusive setting with \"Number\"."
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "Number is the numerical port number (e.g. 80) on the Service.\nThis is a mutually exclusive setting with \"Name\"."
        }
      },
      "description": "ServiceBackendPort is the service port being referenced."
    },
    "v1alpha1IngressSpec": {
      "type": "object",
      "properties": {
        "ingressClassName": {
          "type": "string",
          "title": "IngressClassName is the name of the IngressClass cluster resource.\nThe associated IngressClass defines which controller will implement the\nresource. This replaces the deprecated `kubernetes.io/ingress.class`\nannotation. For backwards compatibility, when that annotation is set, it\nmust be given precedence over this field. The controller may emit a\nwarning if the field and annotation have different values.\nImplementations of this API should ignore Ingresses without a class\nspecified. An IngressClass resource may be marked as default, which can\nbe used to set a default value for this field"
        },
        "tls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1IngressTLS"
          },
          "description": "TLS configuration.\nCurrently the Ingress only supports a single TLS\nport, 443. If multiple members of this list specify different hosts, they\nwill be multiplexed on the same port according to the hostname specified\nthrough the SNI TLS extension, if the ingress controller fulfilling the\ningress supports SNI."
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1IngressRule"
          },
          "description": "A list of host rules used to configure the Ingress. If unspecified, or\nno rule matches, all traffic is sent to the default backend."
        }
      },
      "description": "IngressSpec is the desired state of the Ingress."
    },
    "v1alpha1IngressStatus": {
      "type": "object",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/apinetworkingv1alpha1LoadBalancerStatus",
          "description": "LoadBalancer contains the current status of the load-balancer."
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      },
      "description": "IngressStatus is the current state of the Ingress."
    },
    "v1alpha1IngressTLS": {
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Hosts are a list of hosts included in the TLS certificate.\nThe values in this list must match the name/s used in the tlsSecret. Defaults to the\nwildcard host setting for the loadbalancer controller fulfilling this\nIngress, if left unspecified."
        },
        "secretName": {
          "type": "string",
          "description": "SecretName is the name of the secret used to terminate TLS traffic on  port\n443.\nField is left optional to allow TLS routing based on SNI\nhostname alone. If the SNI host in a listener conflicts with the \"Host\"\nheader field used by an IngressRule, the SNI host is used for termination\nand value of the Host header is used for routing."
        }
      },
      "description": "IngressTLS describes the transport layer security associated with an Ingress."
    },
    "v1alpha1Instance": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1InstanceSpec",
          "description": "InstanceSpec defines the desired behavior of the karmada."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1InstanceStatus",
          "description": "InstanceStatus defines the observed state of karmada."
        }
      },
      "description": "Instance enables declarative installation of karmada."
    },
    "v1alpha1InstanceSpec": {
      "type": "object",
      "properties": {
        "hostCluster": {
          "$ref": "#/definitions/v1alpha1HostCluster",
          "title": "HostCluster represents the cluster where to install the Karmada control plane.\nIf not set, the control plane will be installed on the cluster where\nrunning the operator.\n+optional"
        }
      },
      "description": "InstanceSpec is the specification of the desired behavior of the Karmada."
    },
    "v1alpha1InstanceStatus": {
      "type": "object",
      "properties": {
        "karmadaVersion": {
          "type": "string",
          "description": "KarmadaVersion represente the karmada verison."
        },
        "kubernetesVersion": {
          "type": "string",
          "description": "KubernetesVersion represente the karmada-apiserver version."
        },
        "state": {
          "$ref": "#/definitions/InstanceStatusState",
          "description": "State represents karmada instance current state."
        },
        "summary": {
          "$ref": "#/definitions/v1alpha1InstanceStatusSummary",
          "description": "Summary represents all summary info of member cluster resource."
        }
      },
      "description": "InstanceStatus defines the observed state of karmada."
    },
    "v1alpha1InstanceStatusSummary": {
      "type": "object",
      "properties": {
        "resourceTotalNum": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "ResourceTotalNum represent the total number of distributed resource on karmada control plane.\ne.g: service, ingress, pvc, secret."
        },
        "policyTotalNum": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "PolicyTotalNum represent the total number of policy resource.\ne.g: PropagationPolicy, OverridePolicy."
        },
        "clusterSummary": {
          "$ref": "#/definitions/v1alpha1NumStatistic",
          "description": "ClusterSummary represents the each member cluster summary."
        },
        "nodeSummary": {
          "$ref": "#/definitions/v1alpha1NumStatistic",
          "description": "NodeSummary represents all nodes summary of all clusters."
        },
        "resourceSummary": {
          "$ref": "#/definitions/v1alpha1ResourceSummary",
          "description": "ResourceSummary represents the summary of resources in all of the member cluster."
        },
        "workLoadSummary": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1NumStatistic"
          },
          "description": "WorkLoadSummary represents all workLoads summary of all clusters.\ne.g: deployment, statefulset."
        }
      },
      "description": "The following message is unused."
    },
    "v1alpha1Job": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1JobSpec",
          "description": "JobSpec describes how the job execution will look like."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1JobStatus",
          "description": "JobStatus represents the current state of a Job."
        },
        "executionTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Information when was the time the job was successfully executed."
        }
      },
      "description": "Job represents the details information."
    },
    "v1alpha1JobSpec": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1alpha1PodTemplateSpec",
          "description": "Describes the pod that will be created when executing a job."
        }
      },
      "description": "JobSpec describes how the job execution will look like and when it will\nactually run."
    },
    "v1alpha1JobStatus": {
      "type": "object",
      "properties": {
        "active": {
          "type": "integer",
          "format": "int32",
          "title": "The number of pending and running pods.\n+optional"
        },
        "succeed": {
          "type": "integer",
          "format": "int32",
          "title": "The number of pods which reached phase Succeeded.\n+optional"
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "title": "The number of pods which reached phase Failed.\n+optional"
        },
        "phase": {
          "$ref": "#/definitions/JobStatusJobState",
          "description": "State of a job."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesCondition"
          },
          "description": "Current service state of job."
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      },
      "description": "JobStatus represents the current state of a cron job."
    },
    "v1alpha1KeyToPath": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key to project."
        },
        "path": {
          "type": "string",
          "description": "The relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'."
        },
        "mode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits to use on this file, should be a value between 0\nand 0777. If not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        }
      },
      "description": "KeyToPath maps a string key to a path within a volume."
    },
    "v1alpha1LabelAnnotationOverrider": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/v1alpha1OverriderOperator",
          "title": "Operator represents the operator which will apply on the workload.\n+kubebuilder:validation:Enum=add;remove;replace\n+required"
        },
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Value to be applied to annotations/labels of workload.\nItems in Value which will be appended after annotations/labels when Operator is 'add'.\nItems in Value which match in annotations/labels will be deleted when Operator is 'remove'.\nItems in Value which match in annotations/labels will be replaced when Operator is 'replace'.\n+required"
        }
      },
      "title": "LabelAnnotationOverrider represents the rules dedicated to handling workload labels/annotations"
    },
    "v1alpha1Lifecycle": {
      "type": "object",
      "properties": {
        "PostStart": {
          "$ref": "#/definitions/v1alpha1Handler",
          "title": "PostStart is called immediately after a container is created. If the\nhandler fails, the container is terminated and restarted according to its\nrestart policy. Other management of the container blocks until the hook\ncompletes. More info:\nhttps://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional"
        },
        "preStop": {
          "$ref": "#/definitions/v1alpha1Handler",
          "title": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown\nbegins before the PreStop hook is executed. Regardless of the outcome of\nthe handler, the container will eventually terminate within the Pod's\ntermination grace period (unless delayed by finalizers). Other management\nof the container blocks until the hook completes or until the termination\ngrace period is reached. More info:\nhttps://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional"
        }
      },
      "description": "Lifecycle describes actions that the management system should take in\nresponse to container lifecycle events. For the PostStart and PreStop\nlifecycle handlers, management of the container blocks until the action is\ncomplete, unless the container process fails, in which case the handler is\naborted."
    },
    "v1alpha1ListArtifactsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Artifact"
          },
          "description": "Items is a list of tag names."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "title": "ListArtifactsResponse returns a list of tags of specified image"
    },
    "v1alpha1ListClusterCustomResourcesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CustomResource"
          },
          "title": "Data represents the response of CustomResource"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "title": "ListClusterCustomResourcesResponse represents list all CustomResources of\ncluster scope in cluster"
    },
    "v1alpha1ListClusterOverridePoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterOverridePolicy"
          },
          "description": "Standard object's data."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "List of ClusterOverridePolicy information."
    },
    "v1alpha1ListClusterPropagationPoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterPropagationPolicy"
          },
          "description": "Standard object's data."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "List of ClusterPropagationPolicy information."
    },
    "v1alpha1ListClustersLabelsResponse": {
      "type": "object",
      "properties": {
        "clusterLabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterLabels"
          },
          "description": "ClustersLabels describe labels of member cluster."
        }
      },
      "description": "ListClustersLabelsResponse returns all member cluster labels of Karmada instance."
    },
    "v1alpha1ListClustersLocationsSummaryResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterLocation"
          },
          "title": "total clusters locations list"
        }
      },
      "description": "ListClustersLocationsSummaryResponse return all kpanda-cluster's zones and regions."
    },
    "v1alpha1ListClustersResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Cluster"
          },
          "title": "data The data field is the YAML details"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "Clusters information List."
    },
    "v1alpha1ListConfigMapsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ConfigMap"
          },
          "description": "Standard object's data."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      }
    },
    "v1alpha1ListCronJobsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CronJob"
          },
          "description": "The data field is the cronjob YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "CronJob information List."
    },
    "v1alpha1ListCustomResourceDefinitionGroupsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items represents groups of customResourceDefinitions."
        }
      },
      "title": "ListCustomResourceDefinitionGroupsResponse represents a list of all groups of customResourceDefinitions"
    },
    "v1alpha1ListCustomResourceDefinitionsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CustomResourceDefinition"
          },
          "description": "CustomResourceDefinition represents all custom resource definitions."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "title": "ListCustomResourceDefinitionsResponse represents response of list all\nCustomResourceDefinitions"
    },
    "v1alpha1ListCustomResourcesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CustomResource"
          },
          "title": "Data represents the response of CustomResource"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "title": "ListCustomResourcesResponse represents list all of the CustomResources of\nnamespaced scope in cluster"
    },
    "v1alpha1ListDeploymentsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Deployment"
          },
          "title": "Data represents the kairship's workload types of inclusion"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListDeployments` method."
    },
    "v1alpha1ListEventsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Event"
          },
          "title": "Data response of the workload's event"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "title": "ListEventsByWorkloadNameResponse the response of listEvents by workload name"
    },
    "v1alpha1ListFederatedHPAsRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment",
        "StatefulSet",
        "ReplicaSet"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": "The list of hpa kind enums.\n\n - KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Deployment: A hpa which targetRef kind is Deployment.\n - StatefulSet: A hpa which targetRef kind is StatefulSet.\n - ReplicaSet: A hpa which targetRef kind is ReplicaSet."
    },
    "v1alpha1ListFederatedHPAsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1FederatedHPA"
          },
          "description": "The data is the job YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "HorizontalPodAutoscalers information list."
    },
    "v1alpha1ListIngressClassSummaryResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1IngressClassSummary"
          }
        }
      }
    },
    "v1alpha1ListIngressesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Ingress"
          },
          "description": "Data is the ingress details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Page defines the pagination detail be return."
        }
      },
      "title": "ListIngressesResponse the response of list one cluster ingresses"
    },
    "v1alpha1ListInstanceCronJobsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CronJob"
          },
          "description": "The data field is the cronjob YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "Instance CronJob information List."
    },
    "v1alpha1ListInstanceDeploymentsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Deployment"
          },
          "title": "Data represents the kairship's workload types of inclusion"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListInstanceDeployments` method."
    },
    "v1alpha1ListInstanceEventKindsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Data is the list of involvedObject'kinds of events."
        }
      },
      "description": "ListInstanceEventKindsResponse returns the list of involvedObject's kinds of\nevents."
    },
    "v1alpha1ListInstanceEventsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Event"
          },
          "description": "Data represents the returned event list."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination is for data paging."
        }
      },
      "description": "ListInstanceEventsResponse returns the list and pagination of events."
    },
    "v1alpha1ListInstanceFederatedHPAsRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment",
        "StatefulSet",
        "ReplicaSet"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": "The list of hpa kind enums.\n\n - KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Deployment: A hpa which targetRef kind is Deployment.\n - StatefulSet: A hpa which targetRef kind is StatefulSet.\n - ReplicaSet: A hpa which targetRef kind is ReplicaSet."
    },
    "v1alpha1ListInstanceFederatedHPAsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1FederatedHPA"
          },
          "description": "The data is the job YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      }
    },
    "v1alpha1ListInstanceIngressesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Ingress"
          },
          "description": "Data is the ingress details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "title": "ListInstanceIngressesResponse the response of list all cluster ingresses"
    },
    "v1alpha1ListInstanceJobsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Job"
          },
          "description": "The data is the job YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "Instance Jobs information List."
    },
    "v1alpha1ListInstanceOverridePoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1OverridePolicy"
          },
          "title": "Standard object's data"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListInstanceOverridePolicies` method."
    },
    "v1alpha1ListInstancePropagationPoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PropagationPolicy"
          },
          "title": "Standard object's data"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListInstancePropagationPolicies` method."
    },
    "v1alpha1ListInstanceResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Instance"
          },
          "title": "response instances YAML details"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "ListInstanceResponse defines response informations of list instances."
    },
    "v1alpha1ListInstanceServicesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Service"
          },
          "title": "Data represents the kairship's service"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListInstanceServicesRequest` method."
    },
    "v1alpha1ListInstancesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1WorkspaceInstance"
          }
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "pagination."
        }
      }
    },
    "v1alpha1ListJobsByCronJobNameResponse": {
      "type": "object",
      "properties": {
        "Cluster": {
          "type": "string",
          "description": "The data field is the cronjob YAML details."
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Job"
          }
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "title": "CronJob Name information List"
    },
    "v1alpha1ListJobsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Job"
          },
          "description": "The data is the job YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "Jobs information List."
    },
    "v1alpha1ListMemberClusterDeploymentsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Deployment"
          },
          "title": "Data represents the kairship's workload types of inclusion"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListMemberClusterDeployments` method."
    },
    "v1alpha1ListMemberClusterIngressesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Ingress"
          },
          "description": "Data is the ingress details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListMemberClusterIngresses` method."
    },
    "v1alpha1ListMemberClusterNamespaceSummaryResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1MemberClusterNamespaceSummary"
          },
          "title": "Data is the returned namespace summary list"
        }
      }
    },
    "v1alpha1ListMemberClusterServicesRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": " - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets."
    },
    "v1alpha1ListMemberClusterServicesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Service"
          },
          "title": "Data represents the kairship's workload types of inclusion"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "title": "Pagination is for data paging"
        }
      },
      "description": "Response message for the `ListMemberClusterServices` method."
    },
    "v1alpha1ListNamespaceInstancesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1NamespaceInstance"
          },
          "title": "Namespace binding"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "v1alpha1ListNamespaceSummaryResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1NamespaceSummary"
          },
          "title": "Data is the returned namespace summary list"
        },
        "accessScope": {
          "$ref": "#/definitions/ListNamespaceSummaryResponseScope",
          "description": "AccessScope indicates whether the user has the cluster right."
        }
      }
    },
    "v1alpha1ListNamespacesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Namespace"
          },
          "title": "Data is the returned namespace list"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination"
        }
      },
      "description": "ListNamespaceResponse is a list of Namespaces."
    },
    "v1alpha1ListOverridePoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1OverridePolicy"
          },
          "description": "Standard object's data."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "List of OverridePolicy information."
    },
    "v1alpha1ListPodsForMemberClusterRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment",
        "StatefulSet",
        "DaemonSet",
        "Service",
        "Job",
        "CronJob"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": " - KIND_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.\n - StatefulSet: StatefulSet is the workload API object used to manage stateful\napplications.\n - DaemonSet: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.\n - Service: Service to expose an application running on a set of Pods.\n - Job: Job is used to express a one-time task.\n - CronJob: CronJob runs repeatedly according to its time schedule."
    },
    "v1alpha1ListPodsForMemberClusterResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Pod"
          },
          "description": "Standard object's data."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "List of pod information."
    },
    "v1alpha1ListProjectsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Items is a list of project names."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "title": "ListProjectsResponse returns a list of projects of a registry"
    },
    "v1alpha1ListPropagationPoliciesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PropagationPolicy"
          },
          "description": "Standard object's data."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "List of PropagationPolicy information."
    },
    "v1alpha1ListRegistriesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Registry"
          },
          "title": "items is registry host"
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "title": "ListRegistriesResponse returns a list of registries"
    },
    "v1alpha1ListRepositoriesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Repository"
          },
          "description": "Items is a list of repositories."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "title": "ListRepositoriesResponse returns a list of projects of a registry"
    },
    "v1alpha1ListSecretsForMemberClusterResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Secret"
          },
          "description": "Secret name."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "The Secret list for the given namespace and name if it exists in the\ncluster."
    },
    "v1alpha1ListSecretsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Secret"
          },
          "description": "Secret name."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "List of Secrets data details."
    },
    "v1alpha1ListServicesForMemberClusterRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment",
        "StatefulSet",
        "DaemonSet"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": " - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.\n - StatefulSet: StatefulSet is the workload API object used to manage stateful\napplications.\n - DaemonSet: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod."
    },
    "v1alpha1ListServicesForMemberClusterResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Service"
          },
          "description": "The data field is the service YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "The Service list for the given namespace and name if it exists in the\ncluster."
    },
    "v1alpha1ListServicesRequestKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "Deployment",
        "StatefulSet",
        "DaemonSet"
      ],
      "default": "KIND_UNSPECIFIED",
      "description": " - Deployment: A Deployment provides declarative updates for Pods and ReplicaSets.\n - StatefulSet: StatefulSet is the workload API object used to manage stateful\napplications.\n - DaemonSet: A DaemonSet ensures that all (or some) Nodes run a copy of a Pod."
    },
    "v1alpha1ListServicesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Service"
          },
          "description": "The data field is the service YAML details."
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination",
          "description": "Pagination returned contains current page, size, and total."
        }
      },
      "description": "The Service list for the given namespace and name if it exists in the\ncluster."
    },
    "v1alpha1ListWorkspacesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1WorkspaceInfo"
          }
        },
        "pagination": {
          "$ref": "#/definitions/typesPagination"
        }
      }
    },
    "v1alpha1LoadBalancerIngress": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "description": "IP is set for load-balancer ingress points that are IP based."
        },
        "hostname": {
          "type": "string",
          "description": "Hostname is set for load-balancer ingress points that are DNS based."
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PortStatus"
          },
          "description": "Ports is a list of records of service ports.\nIf used, every port defined in the service should have an entry in it."
        }
      },
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point:\ntraffic intended for the service should be sent to an ingress point."
    },
    "v1alpha1MemberClusterNamespaceSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name must be unique within a instance."
        },
        "instance": {
          "type": "string",
          "description": "Instance the namespace belongs to."
        },
        "cluster": {
          "type": "string"
        }
      }
    },
    "v1alpha1MetricIdentifier": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name is the name of the given metric"
        }
      }
    },
    "v1alpha1MetricSourceType": {
      "type": "string",
      "enum": [
        "METRICS_SOURCE_TYPE_UNSPECIFIED",
        "Object",
        "Pods",
        "Resource",
        "External"
      ],
      "default": "METRICS_SOURCE_TYPE_UNSPECIFIED",
      "title": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\",\n\"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object.\nNote: \"ContainerResource\" type is available on when the feature-gate\nHPAContainerMetrics is enabled"
    },
    "v1alpha1MetricSpec": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1alpha1MetricSourceType",
          "title": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\",\n\"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object.\nNote: \"ContainerResource\" type is available on when the feature-gate\nHPAContainerMetrics is enabled"
        },
        "object": {
          "$ref": "#/definitions/v1alpha1ObjectMetricSource",
          "title": "object refers to a metric describing a single kubernetes object\n(for example, hits-per-second on an Ingress object).\n+optional"
        },
        "pods": {
          "$ref": "#/definitions/v1alpha1PodsMetricSource",
          "title": "pods refers to a metric describing each pod in the current scale target\n(for example, transactions-processed-per-second).  The values will be\naveraged together before being compared to the target value.\n+optional"
        },
        "resource": {
          "$ref": "#/definitions/v1alpha1ResourceMetricSource",
          "title": "resource refers to a resource metric (such as those specified in\nrequests and limits) known to Kubernetes describing each pod in the\ncurrent scale target (e.g. CPU or memory). Such metrics are built in to\nKubernetes, and have special scaling options on top of those available\nto normal per-pod metrics using the \"pods\" source.\n+optional"
        },
        "external": {
          "$ref": "#/definitions/v1alpha1ExternalMetricSource",
          "title": "external refers to a global metric that is not associated\nwith any Kubernetes object. It allows autoscaling based on information\ncoming from components running outside of cluster\n(for example length of queue in cloud messaging service, or\nQPS from loadbalancer running outside of cluster).\n+optional"
        }
      }
    },
    "v1alpha1MetricStatus": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1alpha1MetricSourceType",
          "title": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\",\n\"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object.\nNote: \"ContainerResource\" type is available on when the feature-gate\nHPAContainerMetrics is enabled"
        },
        "object": {
          "$ref": "#/definitions/v1alpha1ObjectMetricStatus",
          "title": "object refers to a metric describing a single kubernetes object\n(for example, hits-per-second on an Ingress object).\n+optional"
        },
        "pods": {
          "$ref": "#/definitions/v1alpha1PodsMetricStatus",
          "title": "pods refers to a metric describing each pod in the current scale target\n(for example, transactions-processed-per-second).  The values will be\naveraged together before being compared to the target value.\n+optional"
        },
        "resource": {
          "$ref": "#/definitions/v1alpha1ResourceMetricStatus",
          "title": "resource refers to a resource metric (such as those specified in\nrequests and limits) known to Kubernetes describing each pod in the\ncurrent scale target (e.g. CPU or memory). Such metrics are built in to\nKubernetes, and have special scaling options on top of those available\nto normal per-pod metrics using the \"pods\" source.\n+optional"
        },
        "external": {
          "$ref": "#/definitions/v1alpha1ExternalMetricStatus",
          "title": "external refers to a global metric that is not associated\nwith any Kubernetes object. It allows autoscaling based on information\ncoming from components running outside of cluster\n(for example length of queue in cloud messaging service, or\nQPS from loadbalancer running outside of cluster).\n+optional"
        }
      },
      "description": "MetricStatus describes the last-read state of a single metric."
    },
    "v1alpha1MetricTarget": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1alpha1MetricTargetType",
          "title": "type represents whether the metric type is Utilization, Value, or AverageValue"
        },
        "value": {
          "type": "string",
          "title": "value is the target value of the metric (as a quantity).\n+optional"
        },
        "averageValue": {
          "type": "string",
          "title": "averageValue is the target value of the average of the\nmetric across all relevant pods (as a quantity)\n+optional"
        },
        "averageUtilization": {
          "type": "integer",
          "format": "int32",
          "title": "averageUtilization is the target value of the average of the\nresource metric across all relevant pods, represented as a percentage of\nthe requested value of the resource for the pods.\nCurrently only valid for Resource metric source type\n+optional"
        }
      }
    },
    "v1alpha1MetricTargetType": {
      "type": "string",
      "enum": [
        "MetricTargetType_UNSPECIFIED",
        "Utilization",
        "Value",
        "AverageValue"
      ],
      "default": "MetricTargetType_UNSPECIFIED",
      "title": "type represents whether the metric type is Utilization, Value, or AverageValue"
    },
    "v1alpha1MetricValueStatus": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "title": "value is the current value of the metric (as a quantity).\n+optional"
        },
        "averageValue": {
          "type": "string",
          "title": "averageValue is the current value of the average of the\nmetric across all relevant pods (as a quantity)\n+optional"
        },
        "averageUtilization": {
          "type": "integer",
          "format": "int32",
          "title": "currentAverageUtilization is the current value of the average of the\nresource metric across all relevant pods, represented as a percentage of\nthe requested value of the resource for the pods.\n+optional"
        }
      },
      "title": "MetricValueStatus holds the current value for a metric"
    },
    "v1alpha1Namespace": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1NamespaceSpec",
          "description": "NamespaceSpec describes how the namespace execution will look like and when\nit will actually run."
        }
      },
      "description": "Namespace provides a scope for Names."
    },
    "v1alpha1NamespaceInstance": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "namespace Name"
        },
        "instance": {
          "type": "string",
          "title": "instance name"
        },
        "workspace": {
          "$ref": "#/definitions/v1alpha1WorkspaceInfo",
          "title": "workspace name"
        }
      }
    },
    "v1alpha1NamespaceSpec": {
      "type": "object",
      "properties": {
        "Finalizers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "NamespaceSpec describes the attributes on a Namespace."
    },
    "v1alpha1NamespaceSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name must be unique within a instance."
        },
        "instance": {
          "type": "string",
          "description": "Instance the namespace belongs to."
        }
      }
    },
    "v1alpha1NodeAffinity": {
      "type": "object",
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/v1alpha1NodeSelector",
          "title": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional"
        },
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PreferredSchedulingTerm"
          },
          "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions;\nthe node(s) with the highest sum are the most preferred. +optional"
        }
      },
      "description": "Node affinity is a group of node affinity scheduling rules."
    },
    "v1alpha1NodeSelector": {
      "type": "object",
      "properties": {
        "nodeSelectorTerms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1NodeSelectorTerm"
          }
        }
      },
      "title": "A node selector represents the union of the results of one or more label\nqueries over a set of nodes; that is, it represents the OR of the selectors\nrepresented by the node selector terms. +structType=atomic"
    },
    "v1alpha1NodeSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or\nDoesNotExist, the values array must be empty. If the operator is Gt or Lt,\nthe values array must have a single element, which will be interpreted as\nan integer. This array is replaced during a strategic merge patch.\n+optional"
        }
      },
      "description": "A node selector requirement is a selector that contains values, a key, and an\noperator that relates the key and values."
    },
    "v1alpha1NodeSelectorTerm": {
      "type": "object",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1NodeSelectorRequirement"
          },
          "title": "A list of node selector requirements by node's labels.\n+optional"
        },
        "matchFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1NodeSelectorRequirement"
          },
          "title": "A list of node selector requirements by node's fields.\n+optional"
        }
      },
      "title": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\n+structType=atomic"
    },
    "v1alpha1NumStatistic": {
      "type": "object",
      "properties": {
        "totalNum": {
          "type": "integer",
          "format": "int32",
          "description": "TotalNum represents the total number of resource of member cluster."
        },
        "readyNum": {
          "type": "integer",
          "format": "int32",
          "description": "ReadyNum represents the resource in ready state."
        }
      }
    },
    "v1alpha1ObjectFieldSelector": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "title": "Version of the schema the FieldPath is written in terms of, defaults to\n\"v1\". +optional"
        },
        "fieldPath": {
          "type": "string",
          "description": "Path of the field to select in the specified API version."
        }
      },
      "description": "ObjectFieldSelector selects an APIVersioned field of an object."
    },
    "v1alpha1ObjectMetricSource": {
      "type": "object",
      "properties": {
        "describedObject": {
          "$ref": "#/definitions/v1alpha1CrossVersionObjectReference",
          "title": "describedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "target": {
          "$ref": "#/definitions/v1alpha1MetricTarget",
          "title": "target specifies the target value for the given metric"
        },
        "metric": {
          "$ref": "#/definitions/v1alpha1MetricIdentifier",
          "title": "metric identifies the target metric by name and selector"
        }
      }
    },
    "v1alpha1ObjectMetricStatus": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v1alpha1MetricIdentifier",
          "title": "metric identifies the target metric by name and selector"
        },
        "current": {
          "$ref": "#/definitions/v1alpha1MetricValueStatus",
          "title": "current contains the current value for the given metric"
        },
        "describedObject": {
          "$ref": "#/definitions/v1alpha1CrossVersionObjectReference",
          "title": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion"
        }
      },
      "description": "ObjectMetricStatus indicates the current value of a metric describing a\nkubernetes object (for example, hits-per-second on an Ingress object)."
    },
    "v1alpha1ObjectReference": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "title": "Kind of the referent.\nMore info:\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional"
        },
        "name": {
          "type": "string",
          "title": "Name of the referent.\nMore info:\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      },
      "description": "ObjectReference contains enough information to let you inspect or modify the\nreferred object."
    },
    "v1alpha1OverridePolicy": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1OverridePolicySpec",
          "description": "Spec represents the desired behavior of OverridePolicy."
        }
      },
      "description": "OverridePolicy represents the policy that overrides a group of resources to one or more clusters."
    },
    "v1alpha1OverridePolicySpec": {
      "type": "object",
      "properties": {
        "resourceSelectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceSelector"
          },
          "title": "ResourceSelectors used to select resources.\n+optional"
        },
        "overrideRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1RuleWithCluster"
          },
          "title": "OverrideRules defines a collection of override rules on target clusters.\n+optional"
        }
      }
    },
    "v1alpha1OverriderOperator": {
      "type": "string",
      "enum": [
        "add",
        "remove",
        "replace"
      ],
      "default": "add"
    },
    "v1alpha1Overriders": {
      "type": "object",
      "properties": {
        "plaintext": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PlaintextOverrider"
          },
          "title": "Plaintext represents override rules defined with plaintext overriders.\n+optional"
        },
        "imageOverrider": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ImageOverrider"
          },
          "title": "ImageOverrider represents the rules dedicated to handling image overrides.\n+optional"
        },
        "commandOverrider": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CommandArgsOverrider"
          },
          "title": "CommandOverrider represents the rules dedicated to handling container command\n+optional"
        },
        "argsOverrider": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1CommandArgsOverrider"
          },
          "title": "ArgsOverrider represents the rules dedicated to handling container args\n+optional"
        },
        "labelsOverrider": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1LabelAnnotationOverrider"
          },
          "title": "LabelsOverrider represents the rules dedicated to handling workload labels\n+optional"
        },
        "annotationsOverrider": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1LabelAnnotationOverrider"
          },
          "title": "AnnotationsOverrider represents the rules dedicated to handling workload annotations\n+optional"
        }
      }
    },
    "v1alpha1PatchConfigMapResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the ConfigMap YAML details"
        }
      }
    },
    "v1alpha1PatchCustomResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data field is the CustomResource YAML details."
        }
      },
      "title": "PatchClusterCustomResourceResponse represents response of updating one\nCustomResource of cluster scope"
    },
    "v1alpha1PatchDeploymentResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the json data of deployment after patching."
        }
      }
    },
    "v1alpha1PatchIngressResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the ingress YAML details,"
        }
      },
      "title": "UpdateIngressRequest the response of patch cluster ingresses"
    },
    "v1alpha1PatchNamespaceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the service YAML details."
        }
      }
    },
    "v1alpha1PatchSecretResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the secret YAML details"
        }
      },
      "description": "It returns patches the current secret details."
    },
    "v1alpha1PatchServiceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the service YAML details."
        }
      }
    },
    "v1alpha1PauseCronJobResponse": {
      "type": "object",
      "properties": {
        "cronjob": {
          "$ref": "#/definitions/v1alpha1CronJob",
          "description": "The new state of the cronjob after pausing."
        }
      },
      "description": "Response message for the `PauseCronJobResponse` method.\nThis response message is assigned to the `response` field of the returned\nOperation when that operation is done."
    },
    "v1alpha1PauseDeploymentResponse": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/v1alpha1Deployment",
          "description": "The new state of the deployment after pausing."
        }
      },
      "description": "Response message for the `PauseDeploymentRequest` method.\nThis response message is assigned to the `response` field of the returned\nOperation when that operation is done."
    },
    "v1alpha1PersistentVolumeClaimVolumeSource": {
      "type": "object",
      "properties": {
        "claimName": {
          "type": "string",
          "title": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as\nthe pod using this volume. More info:\nhttps://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "readOnly": {
          "type": "boolean",
          "title": "Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional"
        }
      },
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same\nnamespace. This volume finds the bound PV and mounts that volume for the pod.\nA PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another\ntype of volume that is owned by someone else (the system)."
    },
    "v1alpha1Placement": {
      "type": "object",
      "properties": {
        "clusterAffinity": {
          "$ref": "#/definitions/v1alpha1ClusterAffinity",
          "title": "ClusterAffinity represents scheduling restrictions to a certain set of clusters.\nIf not set, any cluster can be scheduling candidate.\n+optional"
        },
        "clusterTolerations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apipolicyv1alpha1Toleration"
          },
          "title": "ClusterTolerations represents the tolerations.\n+optional"
        },
        "spreadConstraints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1SpreadConstraint"
          },
          "title": "SpreadConstraints represents a list of the scheduling constraints.\n+optional"
        },
        "replicaScheduling": {
          "$ref": "#/definitions/v1alpha1ReplicaSchedulingStrategy",
          "description": "ReplicaScheduling represents the scheduling policy on dealing with the number of replicas\nwhen propagating resources that have replicas in spec (e.g. deployments, statefulsets) to member clusters."
        },
        "clusterAffinities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterAffinityTerm"
          },
          "description": "ClusterAffinities represents scheduling restrictions to multiple cluster\ngroups that indicated by ClusterAffinityTerm."
        }
      }
    },
    "v1alpha1PlaintextOverrider": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Path indicates the path of target field"
        },
        "operator": {
          "type": "string",
          "title": "Operator indicates the operation on target field.\nAvailable operators are: add, update and remove.\n+kubebuilder:validation:Enum=add;remove;replace"
        },
        "value": {
          "$ref": "#/definitions/v1JSON",
          "title": "Value to be applied to target field.\nMust be empty when operator is Remove.\n+optional"
        }
      }
    },
    "v1alpha1Pod": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1PodSpec",
          "description": "Spec describes the attributes that a pod is created with."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1PodStatus",
          "description": "Status represents the current information/status of node."
        }
      }
    },
    "v1alpha1PodAffinity": {
      "type": "object",
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PodAffinityTerm"
          },
          "title": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional"
        },
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1WeightedPodAffinityTerm"
          },
          "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding\npodAffinityTerm; the node(s) with the highest sum are the most preferred.\n+optional"
        }
      },
      "description": "Pod affinity is a group of inter pod affinity scheduling rules."
    },
    "v1alpha1PodAffinityTerm": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/typesLabelSelector",
          "title": "A label query over a set of resources, in this case pods.\n+optional"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "namespaces specifies a static list of namespace names that the term applies\nto. The term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's\nnamespace\" +optional"
        },
        "topologyKey": {
          "type": "string",
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity)\nwith the pods matching the labelSelector in the specified namespaces, where\nco-located is defined as running on a node whose value of the label with\nkey topologyKey matches that of any node on which any of the selected pods\nis running. Empty topologyKey is not allowed."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/typesLabelSelector",
          "title": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's\nnamespace\". An empty selector ({}) matches all namespaces. This field is\nbeta-level and is only honored when PodAffinityNamespaceSelector feature is\nenabled. +optional"
        }
      },
      "title": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key <topologyKey> matches that of any node on which\na pod of the set of pods is running"
    },
    "v1alpha1PodIp": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        }
      },
      "description": "PodIP represents the IP address of a pod.\nIP address information. Each entry includes:\nIP: An IP address allocated to the pod. Routable at least within the cluster."
    },
    "v1alpha1PodSpec": {
      "type": "object",
      "properties": {
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Volume"
          }
        },
        "initContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Container"
          },
          "title": "init containers"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Container"
          },
          "description": "Containers name."
        },
        "restartPolicy": {
          "type": "string",
          "title": "repeated Container ephemeralContainers = 4;"
        },
        "nodeName": {
          "type": "string",
          "description": "NodeName is a request to schedule this pod onto a specific node.\nIf it is non-empty, the scheduler simply schedules this pod onto that node,\nassuming that it fits resource requirements."
        },
        "hostNetwork": {
          "type": "boolean"
        },
        "affinity": {
          "$ref": "#/definitions/v1alpha1Affinity",
          "title": "bool hostPID = 15;\nbool hostIPC = 16;\nbool shareProcessNamespace = 17;\nPodSecurityContext SecurityContext = 18;\nrepeated LocalObjectReference imagePullSecrets = 19;\nstring hostname = 20;\nstring subdomain = 21;"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apicorev1alpha1Toleration"
          },
          "title": "string schedulerName = 23;"
        }
      },
      "description": "PodSpec describes the attributes that a pod is created with."
    },
    "v1alpha1PodStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "$ref": "#/definitions/v1alpha1PodStatusPhase",
          "description": "Phase represents the phase to search."
        },
        "hostIP": {
          "type": "string",
          "title": "repeated types.Condition conditions = 2;\nstring message = 3;\nstring reason = 4;\nstring nominatedNodeName = 5;"
        },
        "podIP": {
          "type": "string",
          "description": "PodIP represents the IP address of a pod.\nIP address information. Each entry includes:\nIP: An IP address allocated to the pod. Routable at least within the cluster."
        },
        "podIPs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PodIp"
          },
          "title": "PodIPs is same as PodIP"
        },
        "startTime": {
          "type": "string",
          "format": "int64",
          "description": "Required. Start time of the operation."
        },
        "cpuRequest": {
          "type": "string",
          "format": "int64",
          "description": "Pod cpu request."
        },
        "cpuLimit": {
          "type": "string",
          "format": "int64",
          "description": "Pod cpu limit."
        },
        "memoryRequest": {
          "type": "string",
          "format": "int64",
          "description": "Pod memory request."
        },
        "memoryLimit": {
          "type": "string",
          "format": "int64",
          "description": "Pod memory limit."
        },
        "cpuUsageRate": {
          "type": "number",
          "format": "double",
          "description": "cpuUsage_rate  is the actual total pod cpu usage. Unit: m."
        },
        "memoryUsageRate": {
          "type": "number",
          "format": "double",
          "description": "memoryUsage_rate the total pod memory usage. Unit: byte."
        },
        "restartCount": {
          "type": "integer",
          "format": "int32",
          "description": "restart_count the total pod restart count."
        },
        "ownedBy": {
          "$ref": "#/definitions/PodStatusOwnedBy"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesCondition"
          },
          "title": "Current service state of pod.\nMore info:\nhttps://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        },
        "containerTotalCount": {
          "type": "integer",
          "format": "int32",
          "description": "Container_total_count represents pod's container total count."
        },
        "containerReadyCount": {
          "type": "integer",
          "format": "int32",
          "description": "Container_ready_count represents pod's container ready count."
        }
      },
      "description": "PodStatus constructs an declarative configuration of the Pod type for use\nwith apply."
    },
    "v1alpha1PodStatusPhase": {
      "type": "string",
      "enum": [
        "PHASE_UNSPECIFIED",
        "Unknown",
        "Pending",
        "Running",
        "Succeeded",
        "Failed"
      ],
      "default": "PHASE_UNSPECIFIED",
      "description": " - PHASE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - Unknown: PodUnknown means that for some reason the state of the pod could not be\nobtained, typically due to an error in communicating with the host of the\npod.\n - Pending: PodPending means the pod has been accepted by the system, but one or more\nof the containers has not been started. This includes time before being\nbound to a node, as well as time spent pulling images onto the host.\n - Running: PodRunning means the pod has been bound to a node and all of the\ncontainers have been started. At least one container is still running or\nis in the process of being restarted. PodSucceeded means that all\ncontainers in the pod have voluntarily terminated with a container exit\ncode of 0, and the system is not going to restart any of these\ncontainers.\n - Succeeded: PodFailed means that all containers in the pod have terminated, and at\nleast one container has terminated in a failure (exited with a non-zero\nexit code or was stopped by the system).\n - Failed: PodFailed means that all containers in the pod have terminated, and at\nleast one container has terminated in a failure (exited with a non-zero\nexit code or was stopped by the system)."
    },
    "v1alpha1PodTemplateSpec": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1PodSpec",
          "description": "Spec describes the attributes that a pod is created with."
        }
      },
      "description": "template is the object that describes the pod that will be created if\ninsufficient replicas are detected. Each pod stamped out by the StatefulSet\nwill fulfill this Template, but have a unique identity from the rest\nof the StatefulSet."
    },
    "v1alpha1PodsMetricSource": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v1alpha1MetricIdentifier",
          "title": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/v1alpha1MetricTarget",
          "title": "target specifies the target value for the given metric"
        }
      },
      "title": "MetricValueStatus holds the current value for a metric"
    },
    "v1alpha1PodsMetricStatus": {
      "type": "object",
      "properties": {
        "metric": {
          "$ref": "#/definitions/v1alpha1MetricIdentifier",
          "title": "metric identifies the target metric by name and selector"
        },
        "current": {
          "$ref": "#/definitions/v1alpha1MetricValueStatus",
          "title": "current contains the current value for the given metric"
        }
      },
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in\nthe current scale target (for example, transactions-processed-per-second)."
    },
    "v1alpha1PortStatus": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port is the port number of the service port of which status is recorded."
        },
        "error": {
          "type": "string",
          "description": "Error is to record the problem with the service port."
        },
        "protocol": {
          "$ref": "#/definitions/v1alpha1Protocol",
          "description": "Protocol is the protocol of the service port of which status is recorded."
        }
      },
      "title": "PortStatus represents the error condition of a service port"
    },
    "v1alpha1Ports": {
      "type": "object",
      "properties": {
        "containerPort": {
          "type": "integer",
          "format": "int32",
          "description": "ContainerPort connects to a certain container port in a pod."
        },
        "hostPort": {
          "type": "integer",
          "format": "int32",
          "title": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional"
        },
        "name": {
          "type": "string",
          "title": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional"
        },
        "protocol": {
          "type": "string",
          "title": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\""
        }
      },
      "title": "Ports are not allowed for ephemeral containers.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol"
    },
    "v1alpha1PreferredSchedulingTerm": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the\nrange 1-100."
        },
        "preference": {
          "$ref": "#/definitions/v1alpha1NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        }
      },
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects\n(i.e. is also a no-op)."
    },
    "v1alpha1Probe": {
      "type": "object",
      "properties": {
        "failureThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Minimum consecutive failures for the probe to be considered failed after\nhaving succeeded. Defaults to 3. Minimum value is 1. +optional"
        },
        "periodSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Probe describes a health check to be performed against a container to\ndetermine whether it is alive or ready to receive traffic."
        },
        "successThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Minimum consecutive successes for the probe to be considered successful\nafter having failed. Defaults to 1. Must be 1 for liveness and startup.\nMinimum value is 1. +optional"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info:\nhttps://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "initialDelaySeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Number of seconds after the container has started before liveness probes\nare initiated. More info:\nhttps://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "terminationGracePeriodSeconds": {
          "type": "string",
          "format": "int64",
          "title": "Optional duration in seconds the pod needs to terminate gracefully upon\nprobe failure. The grace period is the duration in seconds after the\nprocesses running in the pod are sent a termination signal and the time\nwhen the processes are forcibly halted with a kill signal. Set this value\nlonger than the expected cleanup time for your process. If this value is\nnil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop\nimmediately via the kill signal (no opportunity to shut down). This is a\nbeta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional"
        },
        "httpGet": {
          "$ref": "#/definitions/v1alpha1HTTPGetAction",
          "title": "handler\nHTTPGet specifies the http request to perform.\n+optional"
        },
        "exec": {
          "$ref": "#/definitions/v1alpha1ExecAction",
          "title": "Exec specifies the action to take.\n+optional"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1alpha1TCPSocketAction",
          "title": "TCPSocket specifies an action involving a TCP port.\n+optional"
        }
      },
      "description": "Probe describes a health check to be performed against a container to\ndetermine whether it is alive or ready to receive traffic."
    },
    "v1alpha1PrometheusQueryRangeResult": {
      "type": "object",
      "properties": {
        "matrix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1SampleStream"
          }
        }
      }
    },
    "v1alpha1PrometheusQueryResult": {
      "type": "object",
      "properties": {
        "vector": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Sample"
          }
        }
      }
    },
    "v1alpha1PropagationPolicy": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1PropagationPolicySpec",
          "description": "Spec represents the desired behavior of PropagationPolicy."
        }
      },
      "description": "PropagationPolicy represents the policy that propagates a group of resources to one or more clusters."
    },
    "v1alpha1PropagationPolicySpec": {
      "type": "object",
      "properties": {
        "resourceSelectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceSelector"
          },
          "description": "ResourceSelectors used to select resources."
        },
        "placement": {
          "$ref": "#/definitions/v1alpha1Placement",
          "description": "Placement represents the rule for select clusters to propagate resources."
        },
        "propagateDeps": {
          "type": "boolean",
          "description": "PropagateDeps tells if relevant resources should be propagated automatically.\nTake 'Deployment' which referencing 'ConfigMap' and 'Secret' as an example, when 'propagateDeps' is 'true',\nthe referencing resources could be omitted(for saving config effort) from 'resourceSelectors' as they will be\npropagated along with the Deployment. In addition to the propagating process, the referencing resources will be\nmigrated along with the Deployment in the fail-over scenario."
        },
        "dependentOverrides": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "DependentOverrides represents the list of propagations(PropagationPolicy)\nwhich must present before the current PropagationPolicy takes effect.\n\nIt used to explicitly specify propagations which current PropagationPolicy rely on.\nA typical scenario is the users create PropagationPolicy(ies) and resources at the same time,\nthey want to ensure the new-created policies would be adopted.\n\nNote: For the propagations, PropagationPolicy(ies) in current namespace and ClusterPropagationPolicy(ies),\nwhich not present in this list will still be applied if they matches the resources.\n+optional"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "Priority indicates the importance of a policy(PropagationPolicy or ClusterPropagationPolicy).\nA policy will be applied for the matched resource templates if there is\nno other policies with higher priority at the point of the resource\ntemplate be processed.\nOnce a resource template has been claimed by a policy, by default it will\nnot be preempted by following policies even with a higher priority.\n+kubebuilder:default=0"
        }
      }
    },
    "v1alpha1Protocol": {
      "type": "string",
      "enum": [
        "PROTOCOL_UNSPECIFIED",
        "TCP",
        "UDP",
        "SCTP"
      ],
      "default": "PROTOCOL_UNSPECIFIED",
      "description": "Protocol defines network protocols supported for things like container ports.\n\n - PROTOCOL_UNSPECIFIED: Placeholder to avoid zero not return.\n - TCP: ProtocolTCP is the TCP protocol.\n - UDP: ProtocolUDP is the UDP protocol.\n - SCTP: ProtocolSCTP is the SCTP protocol."
    },
    "v1alpha1Registry": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string",
          "description": "Alias is an alias for the registry, showed in list."
        },
        "host": {
          "type": "string",
          "description": "Host is registry host."
        },
        "name": {
          "type": "string",
          "description": "Name is registry name, use to query project lists."
        }
      },
      "title": "Registry contains necessary info"
    },
    "v1alpha1ReplicaDivisionPreference": {
      "type": "string",
      "enum": [
        "REPLICA_DIVISION_PREFERENCE_UNSPECIFIED",
        "Aggregated",
        "Weighted"
      ],
      "default": "REPLICA_DIVISION_PREFERENCE_UNSPECIFIED",
      "description": " - Aggregated: Aggregated divides replicas into clusters as few as possible,\nwhile respecting clusters' resource availabilities during the division.\n - Weighted: Weighted divides replicas by weight according to WeightPreference."
    },
    "v1alpha1ReplicaSchedulingStrategy": {
      "type": "object",
      "properties": {
        "replicaSchedulingType": {
          "$ref": "#/definitions/v1alpha1ReplicaSchedulingType",
          "title": "ReplicaSchedulingType determines how the replicas is scheduled when karmada propagating\na resource. Valid options are Duplicated and Divided.\n\"Duplicated\" duplicates the same replicas to each candidate member cluster from resource.\n\"Divided\" divides replicas into parts according to number of valid candidate member\nclusters, and exact replicas for each cluster are determined by ReplicaDivisionPreference.\n+optional"
        },
        "replicaDivisionPreference": {
          "$ref": "#/definitions/v1alpha1ReplicaDivisionPreference",
          "title": "ReplicaDivisionPreference determines how the replicas is divided\nwhen ReplicaSchedulingType is \"Divided\". Valid options are Aggregated and Weighted.\n\"Aggregated\" divides replicas into clusters as few as possible,\nwhile respecting clusters' resource availabilities during the division.\n\"Weighted\" divides replicas by weight according to WeightPreference.\n+optional"
        },
        "weightPreference": {
          "$ref": "#/definitions/v1alpha1ClusterPreferences",
          "title": "WeightPreference describes weight for each cluster or for each group of cluster\nIf ReplicaDivisionPreference is set to \"Weighted\", and WeightPreference is not set, scheduler will weight all clusters the same.\n+optiona"
        }
      },
      "description": "ReplicaSchedulingStrategy represents the assignment strategy of replicas."
    },
    "v1alpha1ReplicaSchedulingType": {
      "type": "string",
      "enum": [
        "REPLICA_SCHEDULING_TYPE_UNSPECIFIED",
        "Duplicated",
        "Divided"
      ],
      "default": "REPLICA_SCHEDULING_TYPE_UNSPECIFIED",
      "description": " - Duplicated: Duplicated means when propagating a resource,\neach candidate member cluster will directly apply the original replicas.\n - Divided: Divided means when propagating a resource,\neach candidate member cluster will get only a part of original replicas."
    },
    "v1alpha1Repository": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of repository."
        },
        "public": {
          "type": "boolean"
        },
        "tagCount": {
          "type": "string",
          "format": "int64"
        },
        "pullCount": {
          "type": "string",
          "format": "int64"
        },
        "updateTime": {
          "type": "string",
          "format": "int64"
        },
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Artifact"
          },
          "description": "Artifacts of repository."
        }
      },
      "title": "Repository concept from Harbor"
    },
    "v1alpha1ResourceFieldSelector": {
      "type": "object",
      "properties": {
        "containerName": {
          "type": "string",
          "title": "Container name: required for volumes,\nfor env vars\n+optional"
        },
        "resource": {
          "type": "string",
          "title": "Required: resource to select"
        }
      },
      "title": "ResourceFieldSelector represents container resources (cpu, memory) and their\noutput format"
    },
    "v1alpha1ResourceList": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string",
          "description": "Cpu is the total pod cpu resource. Unit: m."
        },
        "memory": {
          "type": "string",
          "description": "Memory is the total memory resource. Unit: byte."
        },
        "storage": {
          "type": "string",
          "description": "Storage is the total storage resource. Unit: byte."
        }
      },
      "description": "ResourceList returns a string representation of a resource list in a human\nreadable format."
    },
    "v1alpha1ResourceMetricSource": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1ResourceName",
          "description": "name is the name of the resource in question."
        },
        "target": {
          "$ref": "#/definitions/v1alpha1MetricTarget",
          "title": "target specifies the target value for the given metric"
        }
      },
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to\nKubernetes, as specified in requests and limits, describing each pod in the\ncurrent scale target (e.g. CPU or memory).  The values will be averaged\ntogether before being compared to the target.  Such metrics are built in to\nKubernetes, and have special scaling options on top of those available to\nnormal per-pod metrics using the \"pods\" source.  Only one \"target\" type\nshould be set."
    },
    "v1alpha1ResourceMetricStatus": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/v1alpha1ResourceName",
          "description": "Name is the name of the resource in question."
        },
        "current": {
          "$ref": "#/definitions/v1alpha1MetricValueStatus",
          "title": "current contains the current value for the given metric"
        }
      },
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to\nKubernetes, as specified in requests and limits, describing each pod in the\ncurrent scale target (e.g. CPU or memory).  Such metrics are built in to\nKubernetes, and have special scaling options on top of those available to\nnormal per-pod metrics using the \"pods\" source."
    },
    "v1alpha1ResourceName": {
      "type": "string",
      "enum": [
        "RESOURCE_NAME_UNSPECIFIED",
        "cpu",
        "memory"
      ],
      "default": "RESOURCE_NAME_UNSPECIFIED",
      "description": "ResourceName is the name identifying various resources in a ResourceList."
    },
    "v1alpha1ResourceRequirements": {
      "type": "object",
      "properties": {
        "limits": {
          "$ref": "#/definitions/v1alpha1ResourceList",
          "title": "Limits describes the maximum amount of compute resources allowed.\nMore info:\nhttps://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "requests": {
          "$ref": "#/definitions/v1alpha1ResourceList",
          "title": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is\nexplicitly specified, otherwise to an implementation-defined value. More\ninfo:\nhttps://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        }
      },
      "description": "ResourceRequirements describes the compute resource requirements."
    },
    "v1alpha1ResourceSelector": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "title": "APIVersion represents the API version of the target resources.\n+required"
        },
        "kind": {
          "type": "string",
          "title": "Kind represents the Kind of the target resources.\n+required"
        },
        "namespace": {
          "type": "string",
          "title": "Namespace of the target resource.\nDefault is empty, which means inherit from the parent object scope.\n+optional"
        },
        "name": {
          "type": "string",
          "title": "Name of the target resource.\nDefault is empty, which means selecting all resources.\n+optional"
        },
        "labelSelector": {
          "$ref": "#/definitions/typesLabelSelector",
          "title": "A label query over a set of resources.\nIf name is not empty, labelSelector will be ignored.\n+optional"
        }
      }
    },
    "v1alpha1ResourceSummary": {
      "type": "object",
      "properties": {
        "allocatable": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "allocatable represents the resources of a instance that are available for scheduling.\nTotal amount of allocatable resources on all nodes.\n+optional"
        },
        "allocated": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Allocated represents the resources of a instance that have been scheduled.\nTotal amount of required resources of all Pods that have been scheduled to nodes.\n+optional"
        }
      }
    },
    "v1alpha1RestartDeploymentResponse": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/v1alpha1Deployment",
          "description": "The new state of the deployment after restarting."
        }
      },
      "description": "Response message for the `RestartDeploymentResponse` method.\nThis response message is assigned to the `response` field of the returned\nOperation when that operation is done."
    },
    "v1alpha1RestartJobResponse": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/v1alpha1Job",
          "description": "The new state of the job after restarting."
        }
      },
      "description": "Response message for the `RestartJobResponse` method.\nThis response message is assigned to the `response` field of the returned\nOperation when that operation is done."
    },
    "v1alpha1ResumeCronJobResponse": {
      "type": "object",
      "properties": {
        "cronjob": {
          "$ref": "#/definitions/v1alpha1CronJob",
          "description": "The new state of the cronjob after resuming."
        }
      },
      "description": "Response message for the `ResumeCronJobResponse` method.\nThis response message is assigned to the `response` field of the returned\nOperation when that operation is done."
    },
    "v1alpha1ResumeDeploymentResponse": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/v1alpha1Deployment",
          "description": "The new state of the deployment after resuming."
        }
      },
      "description": "Response message for the `ResumeDeploymentResponse` method.\nThis response message is assigned to the `response` field of the returned\nOperation when that operation is done."
    },
    "v1alpha1RuleWithCluster": {
      "type": "object",
      "properties": {
        "targetCluster": {
          "$ref": "#/definitions/v1alpha1ClusterAffinity",
          "title": "TargetCluster defines restrictions on this override policy\nthat only applies to resources propagated to the matching clusters.\nnil means matching all clusters.\n+optional"
        },
        "overriders": {
          "$ref": "#/definitions/v1alpha1Overriders",
          "title": "Overriders represents the override rules that would apply on resources\n+required"
        }
      }
    },
    "v1alpha1Sample": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "values": {
          "$ref": "#/definitions/v1alpha1samplePair"
        }
      }
    },
    "v1alpha1SampleStream": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1samplePair"
          }
        }
      }
    },
    "v1alpha1Secret": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "immutable": {
          "type": "boolean",
          "title": "Immutable, if set to true, ensures that data stored in the Secret cannot\nbe updated (only object metadata can be modified).\nIf not set to true, the field can be modified at any time.\nDefaulted to nil.\n+optional"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Data contains the secret data. Each key must consist of alphanumeric\ncharacters, '-', '_' or '.'. The serialized form of the secret data is a\nbase64 encoded string, representing the arbitrary (possibly non-string)\ndata value here. Described in https://tools.ietf.org/html/rfc4648#section-4\n+optional"
        },
        "stringData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "stringData allows specifying non-binary secret data in string form.\nIt is provided as a write-only input field for convenience.\nAll keys and values are merged into the data field on write, overwriting any existing values.\nThe stringData field is never output when reading from the API.\n+k8s:conversion-gen=false\n+optional"
        },
        "type": {
          "type": "string",
          "title": "Used to facilitate programmatic handling of secret data.\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1SecretStatus",
          "description": "Status represents the current status of a Secret."
        }
      }
    },
    "v1alpha1SecretEnvSource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of SecretEnvSource."
        },
        "optional": {
          "type": "boolean"
        }
      },
      "description": "SecretEnvSource selects a Secret to populate the environment\nvariables with.\nThe contents of the target Secret's Data field will represent the\nkey-value pairs as environment variables."
    },
    "v1alpha1SecretKeySelector": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of Secret."
        },
        "key": {
          "type": "string",
          "description": "Required. The secret key to be applied to a pod."
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the Secret or its key must be defined\n+optional"
        }
      },
      "description": "SecretKeySelector selects a key of a Secret."
    },
    "v1alpha1SecretStatus": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      }
    },
    "v1alpha1SecretVolumeSource": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string",
          "title": "Name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1KeyToPath"
          },
          "title": "If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional"
        },
        "defaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0\nand 511. YAML accepts both octal and decimal values, JSON requires decimal\nvalues for mode bits. Defaults to 0644. Directories within the path are not\naffected by this setting. This might be in conflict with other options that\naffect the file mode, like fsGroup, and the result can be other mode bits\nset. +optional"
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the Secret or its keys must be defined\n+optional"
        }
      },
      "description": "Adapts a Secret into a volume.\nThe contents of the target Secret's Data field will be presented in a volume\nas files using the keys in the Data field as the file names.\nSecret volumes support ownership management and SELinux relabeling."
    },
    "v1alpha1SecurityContext": {
      "type": "object",
      "properties": {
        "privileged": {
          "type": "boolean",
          "title": "Capabilities capabilities = 1;"
        },
        "runAsUser": {
          "type": "string",
          "format": "int64",
          "title": "SELinuxOptions seLinuxOptions = 3;\nWindowsSecurityContextOptions WindowsOptions = 4;"
        }
      },
      "title": "SecretKeySelector selects a key of a Secret.\n+structType=atomic"
    },
    "v1alpha1Service": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/typesObjectMeta",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1ServiceSpec",
          "description": "It describes the attributes that a user creates on a service."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1ServiceStatus",
          "title": "Most recently observed status of the Service.\n+optional"
        }
      }
    },
    "v1alpha1ServicePort": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this port within the service. This must be a DNS_LABEL."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol is IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\"."
        },
        "appProtocol": {
          "type": "string",
          "description": "AppProtocol is the application protocol for this port."
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port will be exposed by this service."
        },
        "targetPort": {
          "type": "string",
          "description": "TargetPort is the number or name of the port to access on the pods targeted\nby the service."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "NodePort is the port on each node on which this service is exposed when\ntype is NodePort or LoadBalancer."
        }
      }
    },
    "v1alpha1ServiceSpec": {
      "type": "object",
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ServicePort"
          },
          "description": "Ports is the list of ports that are exposed by this service."
        },
        "selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Selector is to route service traffic to pods with label keys and values\nmatching this selector."
        },
        "clusterIP": {
          "type": "string",
          "description": "ClusterIP is the IP address of the service and is usually assigned\nrandomly."
        },
        "clusterIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ClusterIPs is a list of IP addresses assigned to this service, and are\nusually assigned randomly.\nThis field came out since kubernetes version 1.20.\nTODO: Make it compatible\nMore info:\nhttps://v1-20.docs.kubernetes.io/zh/docs/concepts/services-networking/dual-stack/\nhttps://v1-19.docs.kubernetes.io/zh/docs/concepts/services-networking/dual-stack/"
        },
        "type": {
          "$ref": "#/definitions/v1alpha1ServiceType",
          "title": "ServiceType string describes ingress methods for a service"
        },
        "externalIPs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "ExternalIPs is a list of IP addresses for which nodes in the cluster\nwill also accept traffic for this service."
        },
        "sessionAffinity": {
          "type": "string",
          "description": "SessionAffinity supports \"ClientIP\" and \"None\". Used to maintain session\naffinity."
        },
        "loadBalancerIP": {
          "type": "string",
          "description": "LoadBalancerIP only applies to Service Type: LoadBalancer."
        },
        "IPFamilies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this\nservice, and is gated by the \"IPv6DualStack\" feature gate.\nThis field has changed from ipFamily (string) to ipFamilies (array) since\nkubernetes version 1.20.\nTODO: Make it compatible\nMore info:\nhttps://v1-20.docs.kubernetes.io/zh/docs/concepts/services-networking/dual-stack/\nhttps://v1-19.docs.kubernetes.io/zh/docs/concepts/services-networking/dual-stack/"
        }
      },
      "description": "ServiceSpec describes the attributes that a user creates on a service."
    },
    "v1alpha1ServiceStatus": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ClusterProviderSummary"
          },
          "title": "Clusters represents target member clusters where the resource to be deployed"
        }
      }
    },
    "v1alpha1ServiceType": {
      "type": "string",
      "enum": [
        "SERVICE_TYPE_UNSPECIFIED",
        "ClusterIP",
        "NodePort",
        "LoadBalancer",
        "ExternalName"
      ],
      "default": "SERVICE_TYPE_UNSPECIFIED",
      "description": "- SERVICE_TYPE_UNSPECIFIED: This is only a meaningless placeholder, to avoid zero not return.\n - ClusterIP: ClusterIP means a service will only be accessible inside the cluster, via\nthe cluster IP.\n - NodePort: NodePort means a service will be exposed on one port of every node, in\naddition to 'ClusterIP' type.\n - LoadBalancer: LoadBalancer means a service will be exposed via an external load balancer\n(if the cloud provider supports it), in addition to 'NodePort' type.\n - ExternalName: ExternalName means a service consists of only a reference to an external\nname that kubedns or equivalent will return as a CNAME record, with no\nexposing or proxying of any pods involved.",
      "title": "ServiceType string describes ingress methods for a service"
    },
    "v1alpha1SpreadConstraint": {
      "type": "object",
      "properties": {
        "spreadByField": {
          "$ref": "#/definitions/v1alpha1SpreadFieldValue",
          "title": "SpreadByField represents the fields on Karmada cluster API used for\ndynamically grouping member clusters into different groups.\nResources will be spread among different cluster groups.\nAvailable fields for spreading are: cluster, region, zone, and provider.\nSpreadByField should not co-exist with SpreadByLabel.\nIf both SpreadByField and SpreadByLabel are empty, SpreadByField will be set to \"cluster\" by system.\n+optional"
        },
        "spreadByLabel": {
          "type": "string",
          "title": "SpreadByLabel represents the label key used for\ngrouping member clusters into different groups.\nResources will be spread among different cluster groups.\nSpreadByLabel should not co-exist with SpreadByField.\n+optional"
        },
        "maxGroups": {
          "type": "string",
          "format": "int64",
          "description": "MaxGroups restricts the maximum number of cluster groups to be selected."
        },
        "minGroups": {
          "type": "string",
          "format": "int64",
          "description": "MinGroups restricts the minimum number of cluster groups to be selected."
        }
      }
    },
    "v1alpha1SpreadFieldValue": {
      "type": "string",
      "enum": [
        "SPREAD_FIELD_VALUE_UNSPECIFIED",
        "cluster",
        "region",
        "zone",
        "provider"
      ],
      "default": "SPREAD_FIELD_VALUE_UNSPECIFIED",
      "description": "Available fields for spreading are: cluster, region, zone, and provider."
    },
    "v1alpha1StaticClusterWeight": {
      "type": "object",
      "properties": {
        "targetCluster": {
          "$ref": "#/definitions/v1alpha1ClusterAffinity",
          "description": "TargetCluster describes the filter to select clusters."
        },
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "Weight expressing the preference to the cluster(s) specified by 'TargetCluster'."
        }
      },
      "description": "StaticClusterWeight defines the static cluster weight."
    },
    "v1alpha1TCPSocketAction": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME."
        },
        "host": {
          "type": "string",
          "title": "Optional: Host name to connect to, defaults to the pod IP.\n+optional"
        }
      },
      "description": "TCPSocketAction describes an action based on opening a socket."
    },
    "v1alpha1Tag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the tag."
        },
        "pushTime": {
          "type": "string",
          "format": "int64",
          "description": "Tag push time."
        }
      },
      "description": "Tag of an image."
    },
    "v1alpha1TypedLocalObjectReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced."
        },
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API\ngroup. For any other third-party types, APIGroup is required."
        }
      },
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace."
    },
    "v1alpha1UpdateClusterCustomResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data field is the CustomResource YAML details."
        }
      },
      "title": "UpdateClusterCustomResourceResponse represents response of updating one\nCustomResource of cluster scope"
    },
    "v1alpha1UpdateClusterOverridePolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the json data of override policy after updating."
        }
      }
    },
    "v1alpha1UpdateClusterPropagationPolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the json data of propagation policy after updating."
        }
      }
    },
    "v1alpha1UpdateConfigMapResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the ConfigMap YAML details"
        }
      }
    },
    "v1alpha1UpdateCronJobResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the CronJob YAML details"
        }
      }
    },
    "v1alpha1UpdateCustomResourceDefinitionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the customResourceDefinition YAML details"
        }
      },
      "title": "UpdateCustomResourceDefinitionResponse represents response of updating\na createCustomResourceDefinition"
    },
    "v1alpha1UpdateCustomResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data field is the CustomResource YAML details."
        }
      },
      "title": "UpdateCustomResourceResponse represents response of updating one\nCustomResource of namespaced scope"
    },
    "v1alpha1UpdateDeploymentResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the Deployment YAML details"
        }
      }
    },
    "v1alpha1UpdateFederatedHPAResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data is the hpa YAML details"
        }
      }
    },
    "v1alpha1UpdateIngressResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the ingress YAML details."
        }
      },
      "title": "UpdateIngressRequest the response of update cluster ingresses"
    },
    "v1alpha1UpdateInstanceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the json data of instance policy after updating."
        }
      },
      "description": "UpdateInstanceResponse defines response informations of update instances."
    },
    "v1alpha1UpdateNamespaceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "description": "Update Namespace data."
    },
    "v1alpha1UpdateOverridePolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the json data of override policy after updating."
        }
      }
    },
    "v1alpha1UpdatePropagationPolicyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "description": "The data is the json data of propagation policy after updating."
        }
      }
    },
    "v1alpha1UpdateSecretResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "The data field is the Secret YAML details"
        }
      },
      "description": "It returns updated secret information."
    },
    "v1alpha1UpdateServiceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "title": "Data is the Service YAML details"
        }
      },
      "description": "It returns the Updated Service data information."
    },
    "v1alpha1Volume": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "hostPath": {
          "$ref": "#/definitions/v1alpha1HostPathVolumeSource",
          "description": "HostPathVolumeSource represents a host path mapped into a pod.\nHost path volumes do not support ownership management or SELinux\nrelabeling."
        },
        "emptyDir": {
          "$ref": "#/definitions/v1alpha1EmptyDirVolumeSource",
          "description": "EmptyDirVolumeSource represents an empty directory for a pod.\nEmpty directory volumes support ownership management and SELinux\nrelabeling."
        },
        "secret": {
          "$ref": "#/definitions/v1alpha1SecretVolumeSource",
          "description": "SecretVolumeSource adapts a Secret into a volume.\nThe contents of the target Secret's Data field will be presented in a\nvolume as files using the keys in the Data field as the file names. Secret\nvolumes support ownership management and SELinux relabeling."
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1alpha1PersistentVolumeClaimVolumeSource",
          "title": "PersistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1alpha1DownwardAPIVolumeSource",
          "description": "DownwardAPIVolumeSource represents a volume containing downward API info.\nDownward API volumes support ownership management and SELinux relabeling."
        },
        "configMap": {
          "$ref": "#/definitions/v1alpha1ConfigMapVolumeSource",
          "description": "ConfigMapVolumeSource adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a\nvolume as files using the keys in the Data field as the file names, unless\nthe items element is populated with specific mappings of keys to paths.\nConfigMap volumes support ownership management and SELinux relabeling."
        }
      },
      "description": "Volume represents a named volume in a pod that may be accessed by any\ncontainer in the pod."
    },
    "v1alpha1VolumeMount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "This must match the Name of a Volume."
        },
        "readOnly": {
          "type": "boolean",
          "title": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional"
        },
        "mountPath": {
          "type": "string",
          "description": "Full path to the mount volume path."
        },
        "subPath": {
          "type": "string",
          "title": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional"
        },
        "mountPropagation": {
          "type": "string",
          "title": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\n+optional"
        },
        "subPathExpr": {
          "type": "string",
          "title": "Expanded path within the volume from which the container's volume should be\nmounted. Behaves similarly to SubPath but environment variable references\n$(VAR_NAME) are expanded using the container's environment. Defaults to \"\"\n(volume's root). SubPathExpr and SubPath are mutually exclusive. +optional"
        }
      },
      "description": "VolumeMount for this container."
    },
    "v1alpha1WeightedPodAffinityTerm": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100."
        },
        "podAffinityTerm": {
          "$ref": "#/definitions/v1alpha1PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        }
      },
      "title": "The weights of all of the matched WeightedPodAffinityTerm fields are added\nper-node to find the most preferred node(s)"
    },
    "v1alpha1WorkspaceInfo": {
      "type": "object",
      "properties": {
        "workspace": {
          "type": "string",
          "title": "workspace name"
        },
        "workspaceId": {
          "type": "integer",
          "format": "int32",
          "title": "workspace id"
        }
      }
    },
    "v1alpha1WorkspaceInstance": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string",
          "description": "workspace name."
        },
        "workspace": {
          "$ref": "#/definitions/v1alpha1WorkspaceInfo",
          "description": "workspace name."
        }
      }
    },
    "v1alpha1samplePair": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "value": {
          "type": "string"
        }
      }
    }
  }
}
